// @generated by protobuf-ts 2.8.2 with parameter use_proto_field_name,generate_dependencies
// @generated from protobuf file "qroma-comm.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { FileSystemResponse } from "./file-system-commands";
import { QromaCommConfigCommand } from "./qroma-comm-config-commands";
import { FileSystemCommand } from "./file-system-commands";
/**
 * @generated from protobuf message QromaCommCommand
 */
export interface QromaCommCommand {
    /**
     * @generated from protobuf oneof: command
     */
    command: {
        oneofKind: "appCommandBytes";
        /**
         * @generated from protobuf field: bytes appCommandBytes = 1;
         */
        appCommandBytes: Uint8Array;
    } | {
        oneofKind: "fsCommand";
        /**
         * @generated from protobuf field: FileSystemCommand fsCommand = 2;
         */
        fsCommand: FileSystemCommand;
    } | {
        oneofKind: "commConfigCommand";
        /**
         * @generated from protobuf field: QromaCommConfigCommand commConfigCommand = 3;
         */
        commConfigCommand: QromaCommConfigCommand;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message QromaCommResponse
 */
export interface QromaCommResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "appResponseBytes";
        /**
         * @generated from protobuf field: bytes appResponseBytes = 1;
         */
        appResponseBytes: Uint8Array;
    } | {
        oneofKind: "fsResponse";
        /**
         * @generated from protobuf field: FileSystemResponse fsResponse = 2;
         */
        fsResponse: FileSystemResponse;
    } | {
        oneofKind: "commConfigResponse";
        /**
         * @generated from protobuf field: QromaCommConfigCommand commConfigResponse = 3;
         */
        commConfigResponse: QromaCommConfigCommand;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class QromaCommCommand$Type extends MessageType<QromaCommCommand> {
    constructor() {
        super("QromaCommCommand", [
            { no: 1, name: "appCommandBytes", kind: "scalar", oneof: "command", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "fsCommand", kind: "message", oneof: "command", T: () => FileSystemCommand },
            { no: 3, name: "commConfigCommand", kind: "message", oneof: "command", T: () => QromaCommConfigCommand }
        ]);
    }
    create(value?: PartialMessage<QromaCommCommand>): QromaCommCommand {
        const message = { command: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QromaCommCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaCommCommand): QromaCommCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes appCommandBytes */ 1:
                    message.command = {
                        oneofKind: "appCommandBytes",
                        appCommandBytes: reader.bytes()
                    };
                    break;
                case /* FileSystemCommand fsCommand */ 2:
                    message.command = {
                        oneofKind: "fsCommand",
                        fsCommand: FileSystemCommand.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).fsCommand)
                    };
                    break;
                case /* QromaCommConfigCommand commConfigCommand */ 3:
                    message.command = {
                        oneofKind: "commConfigCommand",
                        commConfigCommand: QromaCommConfigCommand.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).commConfigCommand)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QromaCommCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes appCommandBytes = 1; */
        if (message.command.oneofKind === "appCommandBytes")
            writer.tag(1, WireType.LengthDelimited).bytes(message.command.appCommandBytes);
        /* FileSystemCommand fsCommand = 2; */
        if (message.command.oneofKind === "fsCommand")
            FileSystemCommand.internalBinaryWrite(message.command.fsCommand, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* QromaCommConfigCommand commConfigCommand = 3; */
        if (message.command.oneofKind === "commConfigCommand")
            QromaCommConfigCommand.internalBinaryWrite(message.command.commConfigCommand, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaCommCommand
 */
export const QromaCommCommand = new QromaCommCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QromaCommResponse$Type extends MessageType<QromaCommResponse> {
    constructor() {
        super("QromaCommResponse", [
            { no: 1, name: "appResponseBytes", kind: "scalar", oneof: "response", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "fsResponse", kind: "message", oneof: "response", T: () => FileSystemResponse },
            { no: 3, name: "commConfigResponse", kind: "message", oneof: "response", T: () => QromaCommConfigCommand }
        ]);
    }
    create(value?: PartialMessage<QromaCommResponse>): QromaCommResponse {
        const message = { response: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QromaCommResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaCommResponse): QromaCommResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes appResponseBytes */ 1:
                    message.response = {
                        oneofKind: "appResponseBytes",
                        appResponseBytes: reader.bytes()
                    };
                    break;
                case /* FileSystemResponse fsResponse */ 2:
                    message.response = {
                        oneofKind: "fsResponse",
                        fsResponse: FileSystemResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).fsResponse)
                    };
                    break;
                case /* QromaCommConfigCommand commConfigResponse */ 3:
                    message.response = {
                        oneofKind: "commConfigResponse",
                        commConfigResponse: QromaCommConfigCommand.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).commConfigResponse)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QromaCommResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes appResponseBytes = 1; */
        if (message.response.oneofKind === "appResponseBytes")
            writer.tag(1, WireType.LengthDelimited).bytes(message.response.appResponseBytes);
        /* FileSystemResponse fsResponse = 2; */
        if (message.response.oneofKind === "fsResponse")
            FileSystemResponse.internalBinaryWrite(message.response.fsResponse, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* QromaCommConfigCommand commConfigResponse = 3; */
        if (message.response.oneofKind === "commConfigResponse")
            QromaCommConfigCommand.internalBinaryWrite(message.response.commConfigResponse, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaCommResponse
 */
export const QromaCommResponse = new QromaCommResponse$Type();
