// @generated by protobuf-ts 2.8.2 with parameter use_proto_field_name,generate_dependencies
// @generated from protobuf file "qroma-core.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { FirmwareDetails } from "./qroma-types";
import { HeartbeatResponse } from "./qroma-types";
import { QromaCoreConfig } from "./qroma-config";
import { QromaCoreManagementConfiguration } from "./qroma-config";
import { HeartbeatConfiguration } from "./qroma-config";
import { QromaCoreLoggingConfig } from "./qroma-config";
import { QromaCommSerialProcessingConfig } from "./qroma-config";
import { QromaCommSerialIoConfig } from "./qroma-config";
/**
 * @generated from protobuf message GetQromaCoreConfigCommand
 */
export interface GetQromaCoreConfigCommand {
    /**
     * @generated from protobuf field: uint32 ignoreThis = 1;
     */
    ignoreThis: number;
}
/**
 * @generated from protobuf message GetQromaCoreFirmwareDetailsCommand
 */
export interface GetQromaCoreFirmwareDetailsCommand {
    /**
     * @generated from protobuf field: uint32 ignoreThis = 1;
     */
    ignoreThis: number;
}
/**
 * @generated from protobuf message RestartQromaDeviceCommand
 */
export interface RestartQromaDeviceCommand {
    /**
     * @generated from protobuf field: uint32 ignoreThis = 1;
     */
    ignoreThis: number;
}
/**
 * @generated from protobuf message RestartQromaDeviceAck
 */
export interface RestartQromaDeviceAck {
    /**
     * @generated from protobuf field: uint32 ignoreThis = 1;
     */
    ignoreThis: number;
}
/**
 * @generated from protobuf message SetQromaCommSerialIoConfigCommand
 */
export interface SetQromaCommSerialIoConfigCommand {
    /**
     * @generated from protobuf field: QromaCommSerialIoConfig config = 1;
     */
    config?: QromaCommSerialIoConfig;
}
/**
 * @generated from protobuf message SetQromaCommSerialProcessingConfig
 */
export interface SetQromaCommSerialProcessingConfig {
    /**
     * @generated from protobuf field: QromaCommSerialProcessingConfig config = 1;
     */
    config?: QromaCommSerialProcessingConfig;
}
/**
 * @generated from protobuf message SetQromaCoreLoggingConfigCommand
 */
export interface SetQromaCoreLoggingConfigCommand {
    /**
     * @generated from protobuf field: QromaCoreLoggingConfig config = 1;
     */
    config?: QromaCoreLoggingConfig;
}
/**
 * @generated from protobuf message SetHeartbeatConfigurationCommand
 */
export interface SetHeartbeatConfigurationCommand {
    /**
     * @generated from protobuf field: HeartbeatConfiguration config = 1;
     */
    config?: HeartbeatConfiguration;
}
/**
 * @generated from protobuf message SetQromaCoreManagementConfiguration
 */
export interface SetQromaCoreManagementConfiguration {
    /**
     * @generated from protobuf field: QromaCoreManagementConfiguration config = 1;
     */
    config?: QromaCoreManagementConfiguration;
}
/**
 * @generated from protobuf message QromaCoreCommand
 */
export interface QromaCoreCommand {
    /**
     * @generated from protobuf oneof: command
     */
    command: {
        oneofKind: "getQromaCoreConfig";
        /**
         * @generated from protobuf field: GetQromaCoreConfigCommand getQromaCoreConfig = 1;
         */
        getQromaCoreConfig: GetQromaCoreConfigCommand;
    } | {
        oneofKind: "getFirmwareDetails";
        /**
         * @generated from protobuf field: GetQromaCoreFirmwareDetailsCommand getFirmwareDetails = 2;
         */
        getFirmwareDetails: GetQromaCoreFirmwareDetailsCommand;
    } | {
        oneofKind: "restartQromaDevice";
        /**
         * @generated from protobuf field: RestartQromaDeviceCommand restartQromaDevice = 3;
         */
        restartQromaDevice: RestartQromaDeviceCommand;
    } | {
        oneofKind: "setQromaCommSerialIoConfig";
        /**
         * @generated from protobuf field: SetQromaCommSerialIoConfigCommand setQromaCommSerialIoConfig = 4;
         */
        setQromaCommSerialIoConfig: SetQromaCommSerialIoConfigCommand;
    } | {
        oneofKind: "setQromaCommSerialProcessingConfig";
        /**
         * @generated from protobuf field: SetQromaCommSerialProcessingConfig setQromaCommSerialProcessingConfig = 5;
         */
        setQromaCommSerialProcessingConfig: SetQromaCommSerialProcessingConfig;
    } | {
        oneofKind: "setQromaCoreLoggingConfig";
        /**
         * @generated from protobuf field: SetQromaCoreLoggingConfigCommand setQromaCoreLoggingConfig = 6;
         */
        setQromaCoreLoggingConfig: SetQromaCoreLoggingConfigCommand;
    } | {
        oneofKind: "setQromaCoreManagementConfiguration";
        /**
         * @generated from protobuf field: SetQromaCoreManagementConfiguration setQromaCoreManagementConfiguration = 7;
         */
        setQromaCoreManagementConfiguration: SetQromaCoreManagementConfiguration;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message QromaCoreResponse
 */
export interface QromaCoreResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "qromaCoreConfig";
        /**
         * @generated from protobuf field: QromaCoreConfig qromaCoreConfig = 1;
         */
        qromaCoreConfig: QromaCoreConfig;
    } | {
        oneofKind: "heartbeat";
        /**
         * @generated from protobuf field: HeartbeatResponse heartbeat = 2;
         */
        heartbeat: HeartbeatResponse;
    } | {
        oneofKind: "firmwareDetails";
        /**
         * @generated from protobuf field: FirmwareDetails firmwareDetails = 3;
         */
        firmwareDetails: FirmwareDetails;
    } | {
        oneofKind: "restartAck";
        /**
         * @generated from protobuf field: RestartQromaDeviceAck restartAck = 4;
         */
        restartAck: RestartQromaDeviceAck;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class GetQromaCoreConfigCommand$Type extends MessageType<GetQromaCoreConfigCommand> {
    constructor() {
        super("GetQromaCoreConfigCommand", [
            { no: 1, name: "ignoreThis", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetQromaCoreConfigCommand>): GetQromaCoreConfigCommand {
        const message = { ignoreThis: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetQromaCoreConfigCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetQromaCoreConfigCommand): GetQromaCoreConfigCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 ignoreThis */ 1:
                    message.ignoreThis = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetQromaCoreConfigCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 ignoreThis = 1; */
        if (message.ignoreThis !== 0)
            writer.tag(1, WireType.Varint).uint32(message.ignoreThis);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetQromaCoreConfigCommand
 */
export const GetQromaCoreConfigCommand = new GetQromaCoreConfigCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetQromaCoreFirmwareDetailsCommand$Type extends MessageType<GetQromaCoreFirmwareDetailsCommand> {
    constructor() {
        super("GetQromaCoreFirmwareDetailsCommand", [
            { no: 1, name: "ignoreThis", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetQromaCoreFirmwareDetailsCommand>): GetQromaCoreFirmwareDetailsCommand {
        const message = { ignoreThis: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetQromaCoreFirmwareDetailsCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetQromaCoreFirmwareDetailsCommand): GetQromaCoreFirmwareDetailsCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 ignoreThis */ 1:
                    message.ignoreThis = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetQromaCoreFirmwareDetailsCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 ignoreThis = 1; */
        if (message.ignoreThis !== 0)
            writer.tag(1, WireType.Varint).uint32(message.ignoreThis);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetQromaCoreFirmwareDetailsCommand
 */
export const GetQromaCoreFirmwareDetailsCommand = new GetQromaCoreFirmwareDetailsCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RestartQromaDeviceCommand$Type extends MessageType<RestartQromaDeviceCommand> {
    constructor() {
        super("RestartQromaDeviceCommand", [
            { no: 1, name: "ignoreThis", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RestartQromaDeviceCommand>): RestartQromaDeviceCommand {
        const message = { ignoreThis: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RestartQromaDeviceCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RestartQromaDeviceCommand): RestartQromaDeviceCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 ignoreThis */ 1:
                    message.ignoreThis = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RestartQromaDeviceCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 ignoreThis = 1; */
        if (message.ignoreThis !== 0)
            writer.tag(1, WireType.Varint).uint32(message.ignoreThis);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RestartQromaDeviceCommand
 */
export const RestartQromaDeviceCommand = new RestartQromaDeviceCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RestartQromaDeviceAck$Type extends MessageType<RestartQromaDeviceAck> {
    constructor() {
        super("RestartQromaDeviceAck", [
            { no: 1, name: "ignoreThis", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RestartQromaDeviceAck>): RestartQromaDeviceAck {
        const message = { ignoreThis: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RestartQromaDeviceAck>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RestartQromaDeviceAck): RestartQromaDeviceAck {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 ignoreThis */ 1:
                    message.ignoreThis = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RestartQromaDeviceAck, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 ignoreThis = 1; */
        if (message.ignoreThis !== 0)
            writer.tag(1, WireType.Varint).uint32(message.ignoreThis);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RestartQromaDeviceAck
 */
export const RestartQromaDeviceAck = new RestartQromaDeviceAck$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetQromaCommSerialIoConfigCommand$Type extends MessageType<SetQromaCommSerialIoConfigCommand> {
    constructor() {
        super("SetQromaCommSerialIoConfigCommand", [
            { no: 1, name: "config", kind: "message", T: () => QromaCommSerialIoConfig }
        ]);
    }
    create(value?: PartialMessage<SetQromaCommSerialIoConfigCommand>): SetQromaCommSerialIoConfigCommand {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetQromaCommSerialIoConfigCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetQromaCommSerialIoConfigCommand): SetQromaCommSerialIoConfigCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* QromaCommSerialIoConfig config */ 1:
                    message.config = QromaCommSerialIoConfig.internalBinaryRead(reader, reader.uint32(), options, message.config);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetQromaCommSerialIoConfigCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* QromaCommSerialIoConfig config = 1; */
        if (message.config)
            QromaCommSerialIoConfig.internalBinaryWrite(message.config, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetQromaCommSerialIoConfigCommand
 */
export const SetQromaCommSerialIoConfigCommand = new SetQromaCommSerialIoConfigCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetQromaCommSerialProcessingConfig$Type extends MessageType<SetQromaCommSerialProcessingConfig> {
    constructor() {
        super("SetQromaCommSerialProcessingConfig", [
            { no: 1, name: "config", kind: "message", T: () => QromaCommSerialProcessingConfig }
        ]);
    }
    create(value?: PartialMessage<SetQromaCommSerialProcessingConfig>): SetQromaCommSerialProcessingConfig {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetQromaCommSerialProcessingConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetQromaCommSerialProcessingConfig): SetQromaCommSerialProcessingConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* QromaCommSerialProcessingConfig config */ 1:
                    message.config = QromaCommSerialProcessingConfig.internalBinaryRead(reader, reader.uint32(), options, message.config);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetQromaCommSerialProcessingConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* QromaCommSerialProcessingConfig config = 1; */
        if (message.config)
            QromaCommSerialProcessingConfig.internalBinaryWrite(message.config, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetQromaCommSerialProcessingConfig
 */
export const SetQromaCommSerialProcessingConfig = new SetQromaCommSerialProcessingConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetQromaCoreLoggingConfigCommand$Type extends MessageType<SetQromaCoreLoggingConfigCommand> {
    constructor() {
        super("SetQromaCoreLoggingConfigCommand", [
            { no: 1, name: "config", kind: "message", T: () => QromaCoreLoggingConfig }
        ]);
    }
    create(value?: PartialMessage<SetQromaCoreLoggingConfigCommand>): SetQromaCoreLoggingConfigCommand {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetQromaCoreLoggingConfigCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetQromaCoreLoggingConfigCommand): SetQromaCoreLoggingConfigCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* QromaCoreLoggingConfig config */ 1:
                    message.config = QromaCoreLoggingConfig.internalBinaryRead(reader, reader.uint32(), options, message.config);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetQromaCoreLoggingConfigCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* QromaCoreLoggingConfig config = 1; */
        if (message.config)
            QromaCoreLoggingConfig.internalBinaryWrite(message.config, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetQromaCoreLoggingConfigCommand
 */
export const SetQromaCoreLoggingConfigCommand = new SetQromaCoreLoggingConfigCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetHeartbeatConfigurationCommand$Type extends MessageType<SetHeartbeatConfigurationCommand> {
    constructor() {
        super("SetHeartbeatConfigurationCommand", [
            { no: 1, name: "config", kind: "message", T: () => HeartbeatConfiguration }
        ]);
    }
    create(value?: PartialMessage<SetHeartbeatConfigurationCommand>): SetHeartbeatConfigurationCommand {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetHeartbeatConfigurationCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetHeartbeatConfigurationCommand): SetHeartbeatConfigurationCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* HeartbeatConfiguration config */ 1:
                    message.config = HeartbeatConfiguration.internalBinaryRead(reader, reader.uint32(), options, message.config);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetHeartbeatConfigurationCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* HeartbeatConfiguration config = 1; */
        if (message.config)
            HeartbeatConfiguration.internalBinaryWrite(message.config, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetHeartbeatConfigurationCommand
 */
export const SetHeartbeatConfigurationCommand = new SetHeartbeatConfigurationCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetQromaCoreManagementConfiguration$Type extends MessageType<SetQromaCoreManagementConfiguration> {
    constructor() {
        super("SetQromaCoreManagementConfiguration", [
            { no: 1, name: "config", kind: "message", T: () => QromaCoreManagementConfiguration }
        ]);
    }
    create(value?: PartialMessage<SetQromaCoreManagementConfiguration>): SetQromaCoreManagementConfiguration {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetQromaCoreManagementConfiguration>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetQromaCoreManagementConfiguration): SetQromaCoreManagementConfiguration {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* QromaCoreManagementConfiguration config */ 1:
                    message.config = QromaCoreManagementConfiguration.internalBinaryRead(reader, reader.uint32(), options, message.config);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetQromaCoreManagementConfiguration, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* QromaCoreManagementConfiguration config = 1; */
        if (message.config)
            QromaCoreManagementConfiguration.internalBinaryWrite(message.config, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetQromaCoreManagementConfiguration
 */
export const SetQromaCoreManagementConfiguration = new SetQromaCoreManagementConfiguration$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QromaCoreCommand$Type extends MessageType<QromaCoreCommand> {
    constructor() {
        super("QromaCoreCommand", [
            { no: 1, name: "getQromaCoreConfig", kind: "message", oneof: "command", T: () => GetQromaCoreConfigCommand },
            { no: 2, name: "getFirmwareDetails", kind: "message", oneof: "command", T: () => GetQromaCoreFirmwareDetailsCommand },
            { no: 3, name: "restartQromaDevice", kind: "message", oneof: "command", T: () => RestartQromaDeviceCommand },
            { no: 4, name: "setQromaCommSerialIoConfig", kind: "message", oneof: "command", T: () => SetQromaCommSerialIoConfigCommand },
            { no: 5, name: "setQromaCommSerialProcessingConfig", kind: "message", oneof: "command", T: () => SetQromaCommSerialProcessingConfig },
            { no: 6, name: "setQromaCoreLoggingConfig", kind: "message", oneof: "command", T: () => SetQromaCoreLoggingConfigCommand },
            { no: 7, name: "setQromaCoreManagementConfiguration", kind: "message", oneof: "command", T: () => SetQromaCoreManagementConfiguration }
        ]);
    }
    create(value?: PartialMessage<QromaCoreCommand>): QromaCoreCommand {
        const message = { command: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QromaCoreCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaCoreCommand): QromaCoreCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* GetQromaCoreConfigCommand getQromaCoreConfig */ 1:
                    message.command = {
                        oneofKind: "getQromaCoreConfig",
                        getQromaCoreConfig: GetQromaCoreConfigCommand.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).getQromaCoreConfig)
                    };
                    break;
                case /* GetQromaCoreFirmwareDetailsCommand getFirmwareDetails */ 2:
                    message.command = {
                        oneofKind: "getFirmwareDetails",
                        getFirmwareDetails: GetQromaCoreFirmwareDetailsCommand.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).getFirmwareDetails)
                    };
                    break;
                case /* RestartQromaDeviceCommand restartQromaDevice */ 3:
                    message.command = {
                        oneofKind: "restartQromaDevice",
                        restartQromaDevice: RestartQromaDeviceCommand.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).restartQromaDevice)
                    };
                    break;
                case /* SetQromaCommSerialIoConfigCommand setQromaCommSerialIoConfig */ 4:
                    message.command = {
                        oneofKind: "setQromaCommSerialIoConfig",
                        setQromaCommSerialIoConfig: SetQromaCommSerialIoConfigCommand.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).setQromaCommSerialIoConfig)
                    };
                    break;
                case /* SetQromaCommSerialProcessingConfig setQromaCommSerialProcessingConfig */ 5:
                    message.command = {
                        oneofKind: "setQromaCommSerialProcessingConfig",
                        setQromaCommSerialProcessingConfig: SetQromaCommSerialProcessingConfig.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).setQromaCommSerialProcessingConfig)
                    };
                    break;
                case /* SetQromaCoreLoggingConfigCommand setQromaCoreLoggingConfig */ 6:
                    message.command = {
                        oneofKind: "setQromaCoreLoggingConfig",
                        setQromaCoreLoggingConfig: SetQromaCoreLoggingConfigCommand.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).setQromaCoreLoggingConfig)
                    };
                    break;
                case /* SetQromaCoreManagementConfiguration setQromaCoreManagementConfiguration */ 7:
                    message.command = {
                        oneofKind: "setQromaCoreManagementConfiguration",
                        setQromaCoreManagementConfiguration: SetQromaCoreManagementConfiguration.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).setQromaCoreManagementConfiguration)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QromaCoreCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* GetQromaCoreConfigCommand getQromaCoreConfig = 1; */
        if (message.command.oneofKind === "getQromaCoreConfig")
            GetQromaCoreConfigCommand.internalBinaryWrite(message.command.getQromaCoreConfig, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* GetQromaCoreFirmwareDetailsCommand getFirmwareDetails = 2; */
        if (message.command.oneofKind === "getFirmwareDetails")
            GetQromaCoreFirmwareDetailsCommand.internalBinaryWrite(message.command.getFirmwareDetails, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* RestartQromaDeviceCommand restartQromaDevice = 3; */
        if (message.command.oneofKind === "restartQromaDevice")
            RestartQromaDeviceCommand.internalBinaryWrite(message.command.restartQromaDevice, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* SetQromaCommSerialIoConfigCommand setQromaCommSerialIoConfig = 4; */
        if (message.command.oneofKind === "setQromaCommSerialIoConfig")
            SetQromaCommSerialIoConfigCommand.internalBinaryWrite(message.command.setQromaCommSerialIoConfig, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* SetQromaCommSerialProcessingConfig setQromaCommSerialProcessingConfig = 5; */
        if (message.command.oneofKind === "setQromaCommSerialProcessingConfig")
            SetQromaCommSerialProcessingConfig.internalBinaryWrite(message.command.setQromaCommSerialProcessingConfig, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* SetQromaCoreLoggingConfigCommand setQromaCoreLoggingConfig = 6; */
        if (message.command.oneofKind === "setQromaCoreLoggingConfig")
            SetQromaCoreLoggingConfigCommand.internalBinaryWrite(message.command.setQromaCoreLoggingConfig, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* SetQromaCoreManagementConfiguration setQromaCoreManagementConfiguration = 7; */
        if (message.command.oneofKind === "setQromaCoreManagementConfiguration")
            SetQromaCoreManagementConfiguration.internalBinaryWrite(message.command.setQromaCoreManagementConfiguration, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaCoreCommand
 */
export const QromaCoreCommand = new QromaCoreCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QromaCoreResponse$Type extends MessageType<QromaCoreResponse> {
    constructor() {
        super("QromaCoreResponse", [
            { no: 1, name: "qromaCoreConfig", kind: "message", oneof: "response", T: () => QromaCoreConfig },
            { no: 2, name: "heartbeat", kind: "message", oneof: "response", T: () => HeartbeatResponse },
            { no: 3, name: "firmwareDetails", kind: "message", oneof: "response", T: () => FirmwareDetails },
            { no: 4, name: "restartAck", kind: "message", oneof: "response", T: () => RestartQromaDeviceAck }
        ]);
    }
    create(value?: PartialMessage<QromaCoreResponse>): QromaCoreResponse {
        const message = { response: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QromaCoreResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaCoreResponse): QromaCoreResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* QromaCoreConfig qromaCoreConfig */ 1:
                    message.response = {
                        oneofKind: "qromaCoreConfig",
                        qromaCoreConfig: QromaCoreConfig.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).qromaCoreConfig)
                    };
                    break;
                case /* HeartbeatResponse heartbeat */ 2:
                    message.response = {
                        oneofKind: "heartbeat",
                        heartbeat: HeartbeatResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).heartbeat)
                    };
                    break;
                case /* FirmwareDetails firmwareDetails */ 3:
                    message.response = {
                        oneofKind: "firmwareDetails",
                        firmwareDetails: FirmwareDetails.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).firmwareDetails)
                    };
                    break;
                case /* RestartQromaDeviceAck restartAck */ 4:
                    message.response = {
                        oneofKind: "restartAck",
                        restartAck: RestartQromaDeviceAck.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).restartAck)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QromaCoreResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* QromaCoreConfig qromaCoreConfig = 1; */
        if (message.response.oneofKind === "qromaCoreConfig")
            QromaCoreConfig.internalBinaryWrite(message.response.qromaCoreConfig, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* HeartbeatResponse heartbeat = 2; */
        if (message.response.oneofKind === "heartbeat")
            HeartbeatResponse.internalBinaryWrite(message.response.heartbeat, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* FirmwareDetails firmwareDetails = 3; */
        if (message.response.oneofKind === "firmwareDetails")
            FirmwareDetails.internalBinaryWrite(message.response.firmwareDetails, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* RestartQromaDeviceAck restartAck = 4; */
        if (message.response.oneofKind === "restartAck")
            RestartQromaDeviceAck.internalBinaryWrite(message.response.restartAck, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaCoreResponse
 */
export const QromaCoreResponse = new QromaCoreResponse$Type();
