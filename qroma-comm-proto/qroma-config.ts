// @generated by protobuf-ts 2.8.2 with parameter use_proto_field_name,generate_dependencies
// @generated from protobuf file "qroma-config.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { HeartbeatType } from "./qroma-types";
import { Qroma_LogLevel } from "./qroma-types";
/**
 * @generated from protobuf message QromaCommSerialIoConfig
 */
export interface QromaCommSerialIoConfig {
    /**
     * @generated from protobuf field: uint32 baudRate = 1;
     */
    baudRate: number;
    /**
     * @generated from protobuf field: uint32 rxBufferSize = 2;
     */
    rxBufferSize: number;
    /**
     * @generated from protobuf field: uint32 txBufferSize = 3;
     */
    txBufferSize: number;
}
/**
 * @generated from protobuf message QromaCommSerialProcessingConfig
 */
export interface QromaCommSerialProcessingConfig {
    /**
     * @generated from protobuf field: uint32 msDelayInProcessingLoop = 1;
     */
    msDelayInProcessingLoop: number;
}
/**
 * @generated from protobuf message QromaCoreLoggingConfig
 */
export interface QromaCoreLoggingConfig {
    /**
     * @generated from protobuf field: Qroma_LogLevel logLevel = 1;
     */
    logLevel: Qroma_LogLevel;
}
/**
 * @generated from protobuf message HeartbeatConfiguration
 */
export interface HeartbeatConfiguration {
    /**
     * @generated from protobuf field: HeartbeatType heartbeatType = 1;
     */
    heartbeatType: HeartbeatType;
    /**
     * @generated from protobuf field: uint32 heartbeatIntervalInMs = 2;
     */
    heartbeatIntervalInMs: number;
}
/**
 * @generated from protobuf message QromaCoreManagementConfiguration
 */
export interface QromaCoreManagementConfiguration {
    /**
     * @generated from protobuf field: uint32 projectLoopDelayInMs = 1;
     */
    projectLoopDelayInMs: number;
    /**
     * @generated from protobuf field: HeartbeatConfiguration heartbeatConfiguration = 2;
     */
    heartbeatConfiguration?: HeartbeatConfiguration;
}
/**
 * @generated from protobuf message QromaCoreConfig
 */
export interface QromaCoreConfig {
    /**
     * @generated from protobuf field: QromaCommSerialIoConfig serialIoConfig = 1;
     */
    serialIoConfig?: QromaCommSerialIoConfig;
    /**
     * @generated from protobuf field: QromaCommSerialProcessingConfig serialProcessingConfig = 2;
     */
    serialProcessingConfig?: QromaCommSerialProcessingConfig;
    /**
     * @generated from protobuf field: QromaCoreLoggingConfig loggingConfig = 3;
     */
    loggingConfig?: QromaCoreLoggingConfig;
    /**
     * @generated from protobuf field: QromaCoreManagementConfiguration managementConfig = 4;
     */
    managementConfig?: QromaCoreManagementConfiguration;
}
// @generated message type with reflection information, may provide speed optimized methods
class QromaCommSerialIoConfig$Type extends MessageType<QromaCommSerialIoConfig> {
    constructor() {
        super("QromaCommSerialIoConfig", [
            { no: 1, name: "baudRate", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "rxBufferSize", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "txBufferSize", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<QromaCommSerialIoConfig>): QromaCommSerialIoConfig {
        const message = { baudRate: 0, rxBufferSize: 0, txBufferSize: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QromaCommSerialIoConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaCommSerialIoConfig): QromaCommSerialIoConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 baudRate */ 1:
                    message.baudRate = reader.uint32();
                    break;
                case /* uint32 rxBufferSize */ 2:
                    message.rxBufferSize = reader.uint32();
                    break;
                case /* uint32 txBufferSize */ 3:
                    message.txBufferSize = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QromaCommSerialIoConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 baudRate = 1; */
        if (message.baudRate !== 0)
            writer.tag(1, WireType.Varint).uint32(message.baudRate);
        /* uint32 rxBufferSize = 2; */
        if (message.rxBufferSize !== 0)
            writer.tag(2, WireType.Varint).uint32(message.rxBufferSize);
        /* uint32 txBufferSize = 3; */
        if (message.txBufferSize !== 0)
            writer.tag(3, WireType.Varint).uint32(message.txBufferSize);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaCommSerialIoConfig
 */
export const QromaCommSerialIoConfig = new QromaCommSerialIoConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QromaCommSerialProcessingConfig$Type extends MessageType<QromaCommSerialProcessingConfig> {
    constructor() {
        super("QromaCommSerialProcessingConfig", [
            { no: 1, name: "msDelayInProcessingLoop", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<QromaCommSerialProcessingConfig>): QromaCommSerialProcessingConfig {
        const message = { msDelayInProcessingLoop: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QromaCommSerialProcessingConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaCommSerialProcessingConfig): QromaCommSerialProcessingConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 msDelayInProcessingLoop */ 1:
                    message.msDelayInProcessingLoop = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QromaCommSerialProcessingConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 msDelayInProcessingLoop = 1; */
        if (message.msDelayInProcessingLoop !== 0)
            writer.tag(1, WireType.Varint).uint32(message.msDelayInProcessingLoop);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaCommSerialProcessingConfig
 */
export const QromaCommSerialProcessingConfig = new QromaCommSerialProcessingConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QromaCoreLoggingConfig$Type extends MessageType<QromaCoreLoggingConfig> {
    constructor() {
        super("QromaCoreLoggingConfig", [
            { no: 1, name: "logLevel", kind: "enum", T: () => ["Qroma_LogLevel", Qroma_LogLevel] }
        ]);
    }
    create(value?: PartialMessage<QromaCoreLoggingConfig>): QromaCoreLoggingConfig {
        const message = { logLevel: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QromaCoreLoggingConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaCoreLoggingConfig): QromaCoreLoggingConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Qroma_LogLevel logLevel */ 1:
                    message.logLevel = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QromaCoreLoggingConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Qroma_LogLevel logLevel = 1; */
        if (message.logLevel !== 0)
            writer.tag(1, WireType.Varint).int32(message.logLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaCoreLoggingConfig
 */
export const QromaCoreLoggingConfig = new QromaCoreLoggingConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HeartbeatConfiguration$Type extends MessageType<HeartbeatConfiguration> {
    constructor() {
        super("HeartbeatConfiguration", [
            { no: 1, name: "heartbeatType", kind: "enum", T: () => ["HeartbeatType", HeartbeatType] },
            { no: 2, name: "heartbeatIntervalInMs", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<HeartbeatConfiguration>): HeartbeatConfiguration {
        const message = { heartbeatType: 0, heartbeatIntervalInMs: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HeartbeatConfiguration>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HeartbeatConfiguration): HeartbeatConfiguration {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* HeartbeatType heartbeatType */ 1:
                    message.heartbeatType = reader.int32();
                    break;
                case /* uint32 heartbeatIntervalInMs */ 2:
                    message.heartbeatIntervalInMs = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HeartbeatConfiguration, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* HeartbeatType heartbeatType = 1; */
        if (message.heartbeatType !== 0)
            writer.tag(1, WireType.Varint).int32(message.heartbeatType);
        /* uint32 heartbeatIntervalInMs = 2; */
        if (message.heartbeatIntervalInMs !== 0)
            writer.tag(2, WireType.Varint).uint32(message.heartbeatIntervalInMs);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message HeartbeatConfiguration
 */
export const HeartbeatConfiguration = new HeartbeatConfiguration$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QromaCoreManagementConfiguration$Type extends MessageType<QromaCoreManagementConfiguration> {
    constructor() {
        super("QromaCoreManagementConfiguration", [
            { no: 1, name: "projectLoopDelayInMs", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "heartbeatConfiguration", kind: "message", T: () => HeartbeatConfiguration }
        ]);
    }
    create(value?: PartialMessage<QromaCoreManagementConfiguration>): QromaCoreManagementConfiguration {
        const message = { projectLoopDelayInMs: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QromaCoreManagementConfiguration>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaCoreManagementConfiguration): QromaCoreManagementConfiguration {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 projectLoopDelayInMs */ 1:
                    message.projectLoopDelayInMs = reader.uint32();
                    break;
                case /* HeartbeatConfiguration heartbeatConfiguration */ 2:
                    message.heartbeatConfiguration = HeartbeatConfiguration.internalBinaryRead(reader, reader.uint32(), options, message.heartbeatConfiguration);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QromaCoreManagementConfiguration, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 projectLoopDelayInMs = 1; */
        if (message.projectLoopDelayInMs !== 0)
            writer.tag(1, WireType.Varint).uint32(message.projectLoopDelayInMs);
        /* HeartbeatConfiguration heartbeatConfiguration = 2; */
        if (message.heartbeatConfiguration)
            HeartbeatConfiguration.internalBinaryWrite(message.heartbeatConfiguration, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaCoreManagementConfiguration
 */
export const QromaCoreManagementConfiguration = new QromaCoreManagementConfiguration$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QromaCoreConfig$Type extends MessageType<QromaCoreConfig> {
    constructor() {
        super("QromaCoreConfig", [
            { no: 1, name: "serialIoConfig", kind: "message", T: () => QromaCommSerialIoConfig },
            { no: 2, name: "serialProcessingConfig", kind: "message", T: () => QromaCommSerialProcessingConfig },
            { no: 3, name: "loggingConfig", kind: "message", T: () => QromaCoreLoggingConfig },
            { no: 4, name: "managementConfig", kind: "message", T: () => QromaCoreManagementConfiguration }
        ]);
    }
    create(value?: PartialMessage<QromaCoreConfig>): QromaCoreConfig {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QromaCoreConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaCoreConfig): QromaCoreConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* QromaCommSerialIoConfig serialIoConfig */ 1:
                    message.serialIoConfig = QromaCommSerialIoConfig.internalBinaryRead(reader, reader.uint32(), options, message.serialIoConfig);
                    break;
                case /* QromaCommSerialProcessingConfig serialProcessingConfig */ 2:
                    message.serialProcessingConfig = QromaCommSerialProcessingConfig.internalBinaryRead(reader, reader.uint32(), options, message.serialProcessingConfig);
                    break;
                case /* QromaCoreLoggingConfig loggingConfig */ 3:
                    message.loggingConfig = QromaCoreLoggingConfig.internalBinaryRead(reader, reader.uint32(), options, message.loggingConfig);
                    break;
                case /* QromaCoreManagementConfiguration managementConfig */ 4:
                    message.managementConfig = QromaCoreManagementConfiguration.internalBinaryRead(reader, reader.uint32(), options, message.managementConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QromaCoreConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* QromaCommSerialIoConfig serialIoConfig = 1; */
        if (message.serialIoConfig)
            QromaCommSerialIoConfig.internalBinaryWrite(message.serialIoConfig, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* QromaCommSerialProcessingConfig serialProcessingConfig = 2; */
        if (message.serialProcessingConfig)
            QromaCommSerialProcessingConfig.internalBinaryWrite(message.serialProcessingConfig, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* QromaCoreLoggingConfig loggingConfig = 3; */
        if (message.loggingConfig)
            QromaCoreLoggingConfig.internalBinaryWrite(message.loggingConfig, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* QromaCoreManagementConfiguration managementConfig = 4; */
        if (message.managementConfig)
            QromaCoreManagementConfiguration.internalBinaryWrite(message.managementConfig, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaCoreConfig
 */
export const QromaCoreConfig = new QromaCoreConfig$Type();
