// @generated by protobuf-ts 2.8.2 with parameter use_proto_field_name,generate_dependencies
// @generated from protobuf file "qroma-config.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Qroma_LogLevel } from "./qroma-types";
/**
 * @generated from protobuf message QromaCommSerialIoConfig
 */
export interface QromaCommSerialIoConfig {
    /**
     * @generated from protobuf field: uint32 baudRate = 1;
     */
    baudRate: number;
    /**
     * @generated from protobuf field: uint32 rxBufferSize = 2;
     */
    rxBufferSize: number;
    /**
     * @generated from protobuf field: uint32 txBufferSize = 3;
     */
    txBufferSize: number;
}
/**
 * @generated from protobuf message QromaCommReportingConfig
 */
export interface QromaCommReportingConfig {
    /**
     * @generated from protobuf field: Qroma_LogLevel logLevel = 1;
     */
    logLevel: Qroma_LogLevel;
    /**
     * @generated from protobuf field: uint32 heartbeatIntervalInMs = 2;
     */
    heartbeatIntervalInMs: number;
}
/**
 * @generated from protobuf message QromaCommConfig
 */
export interface QromaCommConfig {
    /**
     * @generated from protobuf field: QromaCommSerialIoConfig serialIoConfig = 1;
     */
    serialIoConfig?: QromaCommSerialIoConfig;
    /**
     * @generated from protobuf field: QromaCommReportingConfig reportingConfig = 2;
     */
    reportingConfig?: QromaCommReportingConfig;
}
// @generated message type with reflection information, may provide speed optimized methods
class QromaCommSerialIoConfig$Type extends MessageType<QromaCommSerialIoConfig> {
    constructor() {
        super("QromaCommSerialIoConfig", [
            { no: 1, name: "baudRate", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "rxBufferSize", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "txBufferSize", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<QromaCommSerialIoConfig>): QromaCommSerialIoConfig {
        const message = { baudRate: 0, rxBufferSize: 0, txBufferSize: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QromaCommSerialIoConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaCommSerialIoConfig): QromaCommSerialIoConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 baudRate */ 1:
                    message.baudRate = reader.uint32();
                    break;
                case /* uint32 rxBufferSize */ 2:
                    message.rxBufferSize = reader.uint32();
                    break;
                case /* uint32 txBufferSize */ 3:
                    message.txBufferSize = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QromaCommSerialIoConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 baudRate = 1; */
        if (message.baudRate !== 0)
            writer.tag(1, WireType.Varint).uint32(message.baudRate);
        /* uint32 rxBufferSize = 2; */
        if (message.rxBufferSize !== 0)
            writer.tag(2, WireType.Varint).uint32(message.rxBufferSize);
        /* uint32 txBufferSize = 3; */
        if (message.txBufferSize !== 0)
            writer.tag(3, WireType.Varint).uint32(message.txBufferSize);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaCommSerialIoConfig
 */
export const QromaCommSerialIoConfig = new QromaCommSerialIoConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QromaCommReportingConfig$Type extends MessageType<QromaCommReportingConfig> {
    constructor() {
        super("QromaCommReportingConfig", [
            { no: 1, name: "logLevel", kind: "enum", T: () => ["Qroma_LogLevel", Qroma_LogLevel] },
            { no: 2, name: "heartbeatIntervalInMs", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<QromaCommReportingConfig>): QromaCommReportingConfig {
        const message = { logLevel: 0, heartbeatIntervalInMs: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QromaCommReportingConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaCommReportingConfig): QromaCommReportingConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Qroma_LogLevel logLevel */ 1:
                    message.logLevel = reader.int32();
                    break;
                case /* uint32 heartbeatIntervalInMs */ 2:
                    message.heartbeatIntervalInMs = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QromaCommReportingConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Qroma_LogLevel logLevel = 1; */
        if (message.logLevel !== 0)
            writer.tag(1, WireType.Varint).int32(message.logLevel);
        /* uint32 heartbeatIntervalInMs = 2; */
        if (message.heartbeatIntervalInMs !== 0)
            writer.tag(2, WireType.Varint).uint32(message.heartbeatIntervalInMs);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaCommReportingConfig
 */
export const QromaCommReportingConfig = new QromaCommReportingConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QromaCommConfig$Type extends MessageType<QromaCommConfig> {
    constructor() {
        super("QromaCommConfig", [
            { no: 1, name: "serialIoConfig", kind: "message", T: () => QromaCommSerialIoConfig },
            { no: 2, name: "reportingConfig", kind: "message", T: () => QromaCommReportingConfig }
        ]);
    }
    create(value?: PartialMessage<QromaCommConfig>): QromaCommConfig {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QromaCommConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaCommConfig): QromaCommConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* QromaCommSerialIoConfig serialIoConfig */ 1:
                    message.serialIoConfig = QromaCommSerialIoConfig.internalBinaryRead(reader, reader.uint32(), options, message.serialIoConfig);
                    break;
                case /* QromaCommReportingConfig reportingConfig */ 2:
                    message.reportingConfig = QromaCommReportingConfig.internalBinaryRead(reader, reader.uint32(), options, message.reportingConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QromaCommConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* QromaCommSerialIoConfig serialIoConfig = 1; */
        if (message.serialIoConfig)
            QromaCommSerialIoConfig.internalBinaryWrite(message.serialIoConfig, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* QromaCommReportingConfig reportingConfig = 2; */
        if (message.reportingConfig)
            QromaCommReportingConfig.internalBinaryWrite(message.reportingConfig, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaCommConfig
 */
export const QromaCommConfig = new QromaCommConfig$Type();
