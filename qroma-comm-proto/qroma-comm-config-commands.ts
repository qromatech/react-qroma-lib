// @generated by protobuf-ts 2.8.2 with parameter use_proto_field_name,generate_dependencies
// @generated from protobuf file "qroma-comm-config-commands.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Qroma_LogLevel } from "./qroma-types";
/**
 * @generated from protobuf message SetLogLevel
 */
export interface SetLogLevel {
    /**
     * @generated from protobuf field: Qroma_LogLevel logLevel = 1;
     */
    logLevel: Qroma_LogLevel;
}
/**
 * @generated from protobuf message QromaCommConfigCommand
 */
export interface QromaCommConfigCommand {
    /**
     * @generated from protobuf oneof: command
     */
    command: {
        oneofKind: "setLogLevel";
        /**
         * @generated from protobuf field: SetLogLevel setLogLevel = 1;
         */
        setLogLevel: SetLogLevel;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class SetLogLevel$Type extends MessageType<SetLogLevel> {
    constructor() {
        super("SetLogLevel", [
            { no: 1, name: "logLevel", kind: "enum", T: () => ["Qroma_LogLevel", Qroma_LogLevel] }
        ]);
    }
    create(value?: PartialMessage<SetLogLevel>): SetLogLevel {
        const message = { logLevel: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetLogLevel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetLogLevel): SetLogLevel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Qroma_LogLevel logLevel */ 1:
                    message.logLevel = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetLogLevel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Qroma_LogLevel logLevel = 1; */
        if (message.logLevel !== 0)
            writer.tag(1, WireType.Varint).int32(message.logLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetLogLevel
 */
export const SetLogLevel = new SetLogLevel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QromaCommConfigCommand$Type extends MessageType<QromaCommConfigCommand> {
    constructor() {
        super("QromaCommConfigCommand", [
            { no: 1, name: "setLogLevel", kind: "message", oneof: "command", T: () => SetLogLevel }
        ]);
    }
    create(value?: PartialMessage<QromaCommConfigCommand>): QromaCommConfigCommand {
        const message = { command: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QromaCommConfigCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaCommConfigCommand): QromaCommConfigCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* SetLogLevel setLogLevel */ 1:
                    message.command = {
                        oneofKind: "setLogLevel",
                        setLogLevel: SetLogLevel.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).setLogLevel)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QromaCommConfigCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* SetLogLevel setLogLevel = 1; */
        if (message.command.oneofKind === "setLogLevel")
            SetLogLevel.internalBinaryWrite(message.command.setLogLevel, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaCommConfigCommand
 */
export const QromaCommConfigCommand = new QromaCommConfigCommand$Type();
