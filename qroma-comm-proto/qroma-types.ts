// @generated by protobuf-ts 2.8.2 with parameter use_proto_field_name,generate_dependencies
// @generated from protobuf file "qroma-types.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Qroma_LogMessage
 */
export interface Qroma_LogMessage {
    /**
     * @generated from protobuf field: uint32 tick = 1;
     */
    tick: number;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
}
/**
 * @generated from protobuf enum Qroma_LogLevel
 */
export enum Qroma_LogLevel {
    /**
     * @generated from protobuf enum value: LogLevel_All = 0;
     */
    LogLevel_All = 0,
    /**
     * @generated from protobuf enum value: LogLevel_Info = 10;
     */
    LogLevel_Info = 10,
    /**
     * @generated from protobuf enum value: LogLevel_Error = 100;
     */
    LogLevel_Error = 100,
    /**
     * @generated from protobuf enum value: LogLevel_Nothing = 255;
     */
    LogLevel_Nothing = 255
}
/**
 * @generated from protobuf enum Qroma_DebugCommMode
 */
export enum Qroma_DebugCommMode {
    /**
     * @generated from protobuf enum value: DebugCommMode_NotSet = 0;
     */
    DebugCommMode_NotSet = 0,
    /**
     * @generated from protobuf enum value: DebugCommMode_None = 1;
     */
    DebugCommMode_None = 1,
    /**
     * @generated from protobuf enum value: DebugCommMode_SerialOnly = 2;
     */
    DebugCommMode_SerialOnly = 2,
    /**
     * @generated from protobuf enum value: DebugCommMode_BluetoothOnly = 3;
     */
    DebugCommMode_BluetoothOnly = 3,
    /**
     * @generated from protobuf enum value: DebugCommMode_SerialAndBluetooth = 4;
     */
    DebugCommMode_SerialAndBluetooth = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class Qroma_LogMessage$Type extends MessageType<Qroma_LogMessage> {
    constructor() {
        super("Qroma_LogMessage", [
            { no: 1, name: "tick", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Qroma_LogMessage>): Qroma_LogMessage {
        const message = { tick: 0, message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Qroma_LogMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Qroma_LogMessage): Qroma_LogMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 tick */ 1:
                    message.tick = reader.uint32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Qroma_LogMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 tick = 1; */
        if (message.tick !== 0)
            writer.tag(1, WireType.Varint).uint32(message.tick);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Qroma_LogMessage
 */
export const Qroma_LogMessage = new Qroma_LogMessage$Type();
