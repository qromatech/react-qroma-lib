// @generated by protobuf-ts 2.8.2 with parameter use_proto_field_name,generate_dependencies
// @generated from protobuf file "file-system-commands.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message DirItem
 */
export interface DirItem {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: DirItemType dirItemType = 2;
     */
    dirItemType: DirItemType;
    /**
     * @generated from protobuf field: uint32 filesize = 3;
     */
    filesize: number;
}
/**
 * @generated from protobuf message FileData
 */
export interface FileData {
    /**
     * @generated from protobuf field: string filename = 1;
     */
    filename: string;
    /**
     * @generated from protobuf field: uint32 filesize = 2;
     */
    filesize: number;
    /**
     * @generated from protobuf field: uint32 checksum = 3;
     */
    checksum: number;
}
/**
 * @generated from protobuf message StoreUpcomingFileDataCommand
 */
export interface StoreUpcomingFileDataCommand {
    /**
     * @generated from protobuf field: FileData fileData = 1;
     */
    fileData?: FileData;
}
/**
 * @generated from protobuf message StoreUpcomingFileDataResponse
 */
export interface StoreUpcomingFileDataResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * @generated from protobuf field: uint32 bytesWritten = 2;
     */
    bytesWritten: number;
    /**
     * @generated from protobuf field: FileData command = 3;
     */
    command?: FileData;
}
/**
 * @generated from protobuf message RmFileCommand
 */
export interface RmFileCommand {
    /**
     * @generated from protobuf field: string filePath = 1;
     */
    filePath: string;
}
/**
 * @generated from protobuf message RmFileResponse
 */
export interface RmFileResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * @generated from protobuf field: RmFileCommand rmFileCommand = 2;
     */
    rmFileCommand?: RmFileCommand;
}
/**
 * @generated from protobuf message RmDirCommand
 */
export interface RmDirCommand {
    /**
     * @generated from protobuf field: string dirPath = 1;
     */
    dirPath: string;
}
/**
 * @generated from protobuf message RmDirResponse
 */
export interface RmDirResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * @generated from protobuf field: RmDirCommand rmDirCommand = 2;
     */
    rmDirCommand?: RmDirCommand;
}
/**
 * @generated from protobuf message MkDirCommand
 */
export interface MkDirCommand {
    /**
     * @generated from protobuf field: string dirPath = 1;
     */
    dirPath: string;
}
/**
 * @generated from protobuf message MkDirResponse
 */
export interface MkDirResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * @generated from protobuf field: MkDirCommand mkDirCommand = 2;
     */
    mkDirCommand?: MkDirCommand;
}
/**
 * @generated from protobuf message ReportFileDataCommand
 */
export interface ReportFileDataCommand {
    /**
     * @generated from protobuf field: string filename = 1;
     */
    filename: string;
}
/**
 * @generated from protobuf message ReportFileDataResponse
 */
export interface ReportFileDataResponse {
    /**
     * @generated from protobuf field: bool fileExists = 1;
     */
    fileExists: boolean;
    /**
     * @generated from protobuf field: FileData fileData = 2;
     */
    fileData?: FileData;
}
/**
 * @generated from protobuf message ListDirContentsCommand
 */
export interface ListDirContentsCommand {
    /**
     * @generated from protobuf field: string dirPath = 1;
     */
    dirPath: string;
    /**
     * @generated from protobuf field: string startsWithConstraint = 2;
     */
    startsWithConstraint: string;
    /**
     * @generated from protobuf field: string endsWithConstraint = 3;
     */
    endsWithConstraint: string;
}
/**
 * @generated from protobuf message ListDirContentsResponse
 */
export interface ListDirContentsResponse {
    /**
     * @generated from protobuf field: string dirPath = 1;
     */
    dirPath: string;
    /**
     * @generated from protobuf field: bool success = 2;
     */
    success: boolean;
    /**
     * @generated from protobuf field: repeated DirItem dirItems = 3;
     */
    dirItems: DirItem[];
}
/**
 * @generated from protobuf message PrintDirContentsCommand
 */
export interface PrintDirContentsCommand {
    /**
     * @generated from protobuf field: string dirPath = 1;
     */
    dirPath: string;
}
/**
 * @generated from protobuf message ResetFilesystemCommand
 */
export interface ResetFilesystemCommand {
    /**
     * @generated from protobuf field: bool dummy = 1;
     */
    dummy: boolean;
}
/**
 * @generated from protobuf message ResetFilesystemResponse
 */
export interface ResetFilesystemResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
}
/**
 * @generated from protobuf message GetFileContentsCommand
 */
export interface GetFileContentsCommand {
    /**
     * @generated from protobuf field: string filePath = 1;
     */
    filePath: string;
}
/**
 * @generated from protobuf message GetFileContentsResponse
 */
export interface GetFileContentsResponse {
    /**
     * @generated from protobuf field: GetFileStatusCode statusCode = 1;
     */
    statusCode: GetFileStatusCode;
    /**
     * @generated from protobuf field: FileData fileData = 2;
     */
    fileData?: FileData;
    /**
     * @generated from protobuf field: bytes fileBytes = 3;
     */
    fileBytes: Uint8Array;
}
/**
 * @generated from protobuf message WriteFileDataCommand
 */
export interface WriteFileDataCommand {
    /**
     * @generated from protobuf field: FileData fileData = 1;
     */
    fileData?: FileData;
    /**
     * @generated from protobuf field: bytes fileBytes = 2;
     */
    fileBytes: Uint8Array;
}
/**
 * @generated from protobuf message WriteFileDataResponse
 */
export interface WriteFileDataResponse {
    /**
     * @generated from protobuf field: WriteFileDataStatusCode statusCode = 1;
     */
    statusCode: WriteFileDataStatusCode;
    /**
     * @generated from protobuf field: FileData command = 2;
     */
    command?: FileData;
}
/**
 * @generated from protobuf message FileSystemCommand
 */
export interface FileSystemCommand {
    /**
     * @generated from protobuf oneof: command
     */
    command: {
        oneofKind: "getFileContentsCommand";
        /**
         * @generated from protobuf field: GetFileContentsCommand getFileContentsCommand = 1;
         */
        getFileContentsCommand: GetFileContentsCommand;
    } | {
        oneofKind: "writeFileDataCommand";
        /**
         * @generated from protobuf field: WriteFileDataCommand writeFileDataCommand = 2;
         */
        writeFileDataCommand: WriteFileDataCommand;
    } | {
        oneofKind: "reportFileDataCommand";
        /**
         * StoreUpcomingFileDataCommand storeUpcomingFileDataCommand = 3;
         *
         * @generated from protobuf field: ReportFileDataCommand reportFileDataCommand = 4;
         */
        reportFileDataCommand: ReportFileDataCommand;
    } | {
        oneofKind: "rmFileCommand";
        /**
         * @generated from protobuf field: RmFileCommand rmFileCommand = 5;
         */
        rmFileCommand: RmFileCommand;
    } | {
        oneofKind: "listDirContentsCommand";
        /**
         * PrintDirContentsCommand printDirContentsCommand = 8;
         *
         * @generated from protobuf field: ListDirContentsCommand listDirContentsCommand = 9;
         */
        listDirContentsCommand: ListDirContentsCommand;
    } | {
        oneofKind: "mkDirCommand";
        /**
         * @generated from protobuf field: MkDirCommand mkDirCommand = 10;
         */
        mkDirCommand: MkDirCommand;
    } | {
        oneofKind: "rmDirCommand";
        /**
         * @generated from protobuf field: RmDirCommand rmDirCommand = 11;
         */
        rmDirCommand: RmDirCommand;
    } | {
        oneofKind: "resetFilesystemCommand";
        /**
         * @generated from protobuf field: ResetFilesystemCommand resetFilesystemCommand = 15;
         */
        resetFilesystemCommand: ResetFilesystemCommand;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message FileSystemResponse
 */
export interface FileSystemResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "getFileContentsResponse";
        /**
         * @generated from protobuf field: GetFileContentsResponse getFileContentsResponse = 1;
         */
        getFileContentsResponse: GetFileContentsResponse;
    } | {
        oneofKind: "writeFileDataResponse";
        /**
         * @generated from protobuf field: WriteFileDataResponse writeFileDataResponse = 2;
         */
        writeFileDataResponse: WriteFileDataResponse;
    } | {
        oneofKind: "reportFileDataResponse";
        /**
         * StoreUpcomingFileDataResponse storeUpcomingFileDataResponse = 3;
         *
         * @generated from protobuf field: ReportFileDataResponse reportFileDataResponse = 4;
         */
        reportFileDataResponse: ReportFileDataResponse;
    } | {
        oneofKind: "rmFileCommand";
        /**
         * @generated from protobuf field: RmFileResponse rmFileCommand = 5;
         */
        rmFileCommand: RmFileResponse;
    } | {
        oneofKind: "listDirContentsResponse";
        /**
         * @generated from protobuf field: ListDirContentsResponse listDirContentsResponse = 9;
         */
        listDirContentsResponse: ListDirContentsResponse;
    } | {
        oneofKind: "mkDirResponse";
        /**
         * @generated from protobuf field: MkDirResponse mkDirResponse = 10;
         */
        mkDirResponse: MkDirResponse;
    } | {
        oneofKind: "rmDirResponse";
        /**
         * @generated from protobuf field: RmDirResponse rmDirResponse = 11;
         */
        rmDirResponse: RmDirResponse;
    } | {
        oneofKind: "resetFilesystemResponse";
        /**
         * @generated from protobuf field: ResetFilesystemResponse resetFilesystemResponse = 15;
         */
        resetFilesystemResponse: ResetFilesystemResponse;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum DirItemType
 */
export enum DirItemType {
    /**
     * @generated from protobuf enum value: DIT_NOT_SET = 0;
     */
    DIT_NOT_SET = 0,
    /**
     * @generated from protobuf enum value: DIT_FILE = 1;
     */
    DIT_FILE = 1,
    /**
     * @generated from protobuf enum value: DIT_DIR = 2;
     */
    DIT_DIR = 2
}
/**
 * @generated from protobuf enum GetFileStatusCode
 */
export enum GetFileStatusCode {
    /**
     * @generated from protobuf enum value: GFSC_NOT_SET = 0;
     */
    GFSC_NOT_SET = 0,
    /**
     * @generated from protobuf enum value: GFSC_SUCCESS = 1;
     */
    GFSC_SUCCESS = 1,
    /**
     * @generated from protobuf enum value: GFSC_ERR_OPEN_FILE = 2;
     */
    GFSC_ERR_OPEN_FILE = 2,
    /**
     * @generated from protobuf enum value: GFSC_ERR_INVALID_FILE = 3;
     */
    GFSC_ERR_INVALID_FILE = 3
}
/**
 * @generated from protobuf enum WriteFileDataStatusCode
 */
export enum WriteFileDataStatusCode {
    /**
     * @generated from protobuf enum value: WFDSC_NOT_SET = 0;
     */
    WFDSC_NOT_SET = 0,
    /**
     * @generated from protobuf enum value: WFDSC_SUCCESS = 1;
     */
    WFDSC_SUCCESS = 1,
    /**
     * @generated from protobuf enum value: WFDSC_ERR_OPEN_FILE = 2;
     */
    WFDSC_ERR_OPEN_FILE = 2,
    /**
     * @generated from protobuf enum value: WFDSC_ERR_CRC_MISMATCH = 3;
     */
    WFDSC_ERR_CRC_MISMATCH = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class DirItem$Type extends MessageType<DirItem> {
    constructor() {
        super("DirItem", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "dirItemType", kind: "enum", T: () => ["DirItemType", DirItemType] },
            { no: 3, name: "filesize", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DirItem>): DirItem {
        const message = { name: "", dirItemType: 0, filesize: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DirItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DirItem): DirItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* DirItemType dirItemType */ 2:
                    message.dirItemType = reader.int32();
                    break;
                case /* uint32 filesize */ 3:
                    message.filesize = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DirItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* DirItemType dirItemType = 2; */
        if (message.dirItemType !== 0)
            writer.tag(2, WireType.Varint).int32(message.dirItemType);
        /* uint32 filesize = 3; */
        if (message.filesize !== 0)
            writer.tag(3, WireType.Varint).uint32(message.filesize);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DirItem
 */
export const DirItem = new DirItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FileData$Type extends MessageType<FileData> {
    constructor() {
        super("FileData", [
            { no: 1, name: "filename", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "filesize", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "checksum", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FileData>): FileData {
        const message = { filename: "", filesize: 0, checksum: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FileData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FileData): FileData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string filename */ 1:
                    message.filename = reader.string();
                    break;
                case /* uint32 filesize */ 2:
                    message.filesize = reader.uint32();
                    break;
                case /* uint32 checksum */ 3:
                    message.checksum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FileData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string filename = 1; */
        if (message.filename !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.filename);
        /* uint32 filesize = 2; */
        if (message.filesize !== 0)
            writer.tag(2, WireType.Varint).uint32(message.filesize);
        /* uint32 checksum = 3; */
        if (message.checksum !== 0)
            writer.tag(3, WireType.Varint).uint32(message.checksum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FileData
 */
export const FileData = new FileData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoreUpcomingFileDataCommand$Type extends MessageType<StoreUpcomingFileDataCommand> {
    constructor() {
        super("StoreUpcomingFileDataCommand", [
            { no: 1, name: "fileData", kind: "message", T: () => FileData }
        ]);
    }
    create(value?: PartialMessage<StoreUpcomingFileDataCommand>): StoreUpcomingFileDataCommand {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoreUpcomingFileDataCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoreUpcomingFileDataCommand): StoreUpcomingFileDataCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* FileData fileData */ 1:
                    message.fileData = FileData.internalBinaryRead(reader, reader.uint32(), options, message.fileData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoreUpcomingFileDataCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* FileData fileData = 1; */
        if (message.fileData)
            FileData.internalBinaryWrite(message.fileData, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoreUpcomingFileDataCommand
 */
export const StoreUpcomingFileDataCommand = new StoreUpcomingFileDataCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoreUpcomingFileDataResponse$Type extends MessageType<StoreUpcomingFileDataResponse> {
    constructor() {
        super("StoreUpcomingFileDataResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "bytesWritten", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "command", kind: "message", T: () => FileData }
        ]);
    }
    create(value?: PartialMessage<StoreUpcomingFileDataResponse>): StoreUpcomingFileDataResponse {
        const message = { success: false, bytesWritten: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoreUpcomingFileDataResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoreUpcomingFileDataResponse): StoreUpcomingFileDataResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* uint32 bytesWritten */ 2:
                    message.bytesWritten = reader.uint32();
                    break;
                case /* FileData command */ 3:
                    message.command = FileData.internalBinaryRead(reader, reader.uint32(), options, message.command);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoreUpcomingFileDataResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* uint32 bytesWritten = 2; */
        if (message.bytesWritten !== 0)
            writer.tag(2, WireType.Varint).uint32(message.bytesWritten);
        /* FileData command = 3; */
        if (message.command)
            FileData.internalBinaryWrite(message.command, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoreUpcomingFileDataResponse
 */
export const StoreUpcomingFileDataResponse = new StoreUpcomingFileDataResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RmFileCommand$Type extends MessageType<RmFileCommand> {
    constructor() {
        super("RmFileCommand", [
            { no: 1, name: "filePath", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RmFileCommand>): RmFileCommand {
        const message = { filePath: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RmFileCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RmFileCommand): RmFileCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string filePath */ 1:
                    message.filePath = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RmFileCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string filePath = 1; */
        if (message.filePath !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.filePath);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RmFileCommand
 */
export const RmFileCommand = new RmFileCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RmFileResponse$Type extends MessageType<RmFileResponse> {
    constructor() {
        super("RmFileResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "rmFileCommand", kind: "message", T: () => RmFileCommand }
        ]);
    }
    create(value?: PartialMessage<RmFileResponse>): RmFileResponse {
        const message = { success: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RmFileResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RmFileResponse): RmFileResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* RmFileCommand rmFileCommand */ 2:
                    message.rmFileCommand = RmFileCommand.internalBinaryRead(reader, reader.uint32(), options, message.rmFileCommand);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RmFileResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* RmFileCommand rmFileCommand = 2; */
        if (message.rmFileCommand)
            RmFileCommand.internalBinaryWrite(message.rmFileCommand, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RmFileResponse
 */
export const RmFileResponse = new RmFileResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RmDirCommand$Type extends MessageType<RmDirCommand> {
    constructor() {
        super("RmDirCommand", [
            { no: 1, name: "dirPath", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RmDirCommand>): RmDirCommand {
        const message = { dirPath: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RmDirCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RmDirCommand): RmDirCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string dirPath */ 1:
                    message.dirPath = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RmDirCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string dirPath = 1; */
        if (message.dirPath !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.dirPath);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RmDirCommand
 */
export const RmDirCommand = new RmDirCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RmDirResponse$Type extends MessageType<RmDirResponse> {
    constructor() {
        super("RmDirResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "rmDirCommand", kind: "message", T: () => RmDirCommand }
        ]);
    }
    create(value?: PartialMessage<RmDirResponse>): RmDirResponse {
        const message = { success: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RmDirResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RmDirResponse): RmDirResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* RmDirCommand rmDirCommand */ 2:
                    message.rmDirCommand = RmDirCommand.internalBinaryRead(reader, reader.uint32(), options, message.rmDirCommand);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RmDirResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* RmDirCommand rmDirCommand = 2; */
        if (message.rmDirCommand)
            RmDirCommand.internalBinaryWrite(message.rmDirCommand, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RmDirResponse
 */
export const RmDirResponse = new RmDirResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MkDirCommand$Type extends MessageType<MkDirCommand> {
    constructor() {
        super("MkDirCommand", [
            { no: 1, name: "dirPath", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MkDirCommand>): MkDirCommand {
        const message = { dirPath: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MkDirCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MkDirCommand): MkDirCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string dirPath */ 1:
                    message.dirPath = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MkDirCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string dirPath = 1; */
        if (message.dirPath !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.dirPath);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MkDirCommand
 */
export const MkDirCommand = new MkDirCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MkDirResponse$Type extends MessageType<MkDirResponse> {
    constructor() {
        super("MkDirResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "mkDirCommand", kind: "message", T: () => MkDirCommand }
        ]);
    }
    create(value?: PartialMessage<MkDirResponse>): MkDirResponse {
        const message = { success: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MkDirResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MkDirResponse): MkDirResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* MkDirCommand mkDirCommand */ 2:
                    message.mkDirCommand = MkDirCommand.internalBinaryRead(reader, reader.uint32(), options, message.mkDirCommand);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MkDirResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* MkDirCommand mkDirCommand = 2; */
        if (message.mkDirCommand)
            MkDirCommand.internalBinaryWrite(message.mkDirCommand, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MkDirResponse
 */
export const MkDirResponse = new MkDirResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReportFileDataCommand$Type extends MessageType<ReportFileDataCommand> {
    constructor() {
        super("ReportFileDataCommand", [
            { no: 1, name: "filename", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ReportFileDataCommand>): ReportFileDataCommand {
        const message = { filename: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReportFileDataCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReportFileDataCommand): ReportFileDataCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string filename */ 1:
                    message.filename = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReportFileDataCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string filename = 1; */
        if (message.filename !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.filename);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ReportFileDataCommand
 */
export const ReportFileDataCommand = new ReportFileDataCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReportFileDataResponse$Type extends MessageType<ReportFileDataResponse> {
    constructor() {
        super("ReportFileDataResponse", [
            { no: 1, name: "fileExists", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "fileData", kind: "message", T: () => FileData }
        ]);
    }
    create(value?: PartialMessage<ReportFileDataResponse>): ReportFileDataResponse {
        const message = { fileExists: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReportFileDataResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReportFileDataResponse): ReportFileDataResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool fileExists */ 1:
                    message.fileExists = reader.bool();
                    break;
                case /* FileData fileData */ 2:
                    message.fileData = FileData.internalBinaryRead(reader, reader.uint32(), options, message.fileData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReportFileDataResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool fileExists = 1; */
        if (message.fileExists !== false)
            writer.tag(1, WireType.Varint).bool(message.fileExists);
        /* FileData fileData = 2; */
        if (message.fileData)
            FileData.internalBinaryWrite(message.fileData, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ReportFileDataResponse
 */
export const ReportFileDataResponse = new ReportFileDataResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListDirContentsCommand$Type extends MessageType<ListDirContentsCommand> {
    constructor() {
        super("ListDirContentsCommand", [
            { no: 1, name: "dirPath", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "startsWithConstraint", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "endsWithConstraint", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListDirContentsCommand>): ListDirContentsCommand {
        const message = { dirPath: "", startsWithConstraint: "", endsWithConstraint: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListDirContentsCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListDirContentsCommand): ListDirContentsCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string dirPath */ 1:
                    message.dirPath = reader.string();
                    break;
                case /* string startsWithConstraint */ 2:
                    message.startsWithConstraint = reader.string();
                    break;
                case /* string endsWithConstraint */ 3:
                    message.endsWithConstraint = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListDirContentsCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string dirPath = 1; */
        if (message.dirPath !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.dirPath);
        /* string startsWithConstraint = 2; */
        if (message.startsWithConstraint !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.startsWithConstraint);
        /* string endsWithConstraint = 3; */
        if (message.endsWithConstraint !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.endsWithConstraint);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListDirContentsCommand
 */
export const ListDirContentsCommand = new ListDirContentsCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListDirContentsResponse$Type extends MessageType<ListDirContentsResponse> {
    constructor() {
        super("ListDirContentsResponse", [
            { no: 1, name: "dirPath", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "dirItems", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DirItem }
        ]);
    }
    create(value?: PartialMessage<ListDirContentsResponse>): ListDirContentsResponse {
        const message = { dirPath: "", success: false, dirItems: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListDirContentsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListDirContentsResponse): ListDirContentsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string dirPath */ 1:
                    message.dirPath = reader.string();
                    break;
                case /* bool success */ 2:
                    message.success = reader.bool();
                    break;
                case /* repeated DirItem dirItems */ 3:
                    message.dirItems.push(DirItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListDirContentsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string dirPath = 1; */
        if (message.dirPath !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.dirPath);
        /* bool success = 2; */
        if (message.success !== false)
            writer.tag(2, WireType.Varint).bool(message.success);
        /* repeated DirItem dirItems = 3; */
        for (let i = 0; i < message.dirItems.length; i++)
            DirItem.internalBinaryWrite(message.dirItems[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListDirContentsResponse
 */
export const ListDirContentsResponse = new ListDirContentsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PrintDirContentsCommand$Type extends MessageType<PrintDirContentsCommand> {
    constructor() {
        super("PrintDirContentsCommand", [
            { no: 1, name: "dirPath", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PrintDirContentsCommand>): PrintDirContentsCommand {
        const message = { dirPath: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PrintDirContentsCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrintDirContentsCommand): PrintDirContentsCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string dirPath */ 1:
                    message.dirPath = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PrintDirContentsCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string dirPath = 1; */
        if (message.dirPath !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.dirPath);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PrintDirContentsCommand
 */
export const PrintDirContentsCommand = new PrintDirContentsCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResetFilesystemCommand$Type extends MessageType<ResetFilesystemCommand> {
    constructor() {
        super("ResetFilesystemCommand", [
            { no: 1, name: "dummy", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ResetFilesystemCommand>): ResetFilesystemCommand {
        const message = { dummy: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ResetFilesystemCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResetFilesystemCommand): ResetFilesystemCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool dummy */ 1:
                    message.dummy = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResetFilesystemCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool dummy = 1; */
        if (message.dummy !== false)
            writer.tag(1, WireType.Varint).bool(message.dummy);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ResetFilesystemCommand
 */
export const ResetFilesystemCommand = new ResetFilesystemCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResetFilesystemResponse$Type extends MessageType<ResetFilesystemResponse> {
    constructor() {
        super("ResetFilesystemResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ResetFilesystemResponse>): ResetFilesystemResponse {
        const message = { success: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ResetFilesystemResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResetFilesystemResponse): ResetFilesystemResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResetFilesystemResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ResetFilesystemResponse
 */
export const ResetFilesystemResponse = new ResetFilesystemResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetFileContentsCommand$Type extends MessageType<GetFileContentsCommand> {
    constructor() {
        super("GetFileContentsCommand", [
            { no: 1, name: "filePath", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetFileContentsCommand>): GetFileContentsCommand {
        const message = { filePath: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetFileContentsCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetFileContentsCommand): GetFileContentsCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string filePath */ 1:
                    message.filePath = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetFileContentsCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string filePath = 1; */
        if (message.filePath !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.filePath);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetFileContentsCommand
 */
export const GetFileContentsCommand = new GetFileContentsCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetFileContentsResponse$Type extends MessageType<GetFileContentsResponse> {
    constructor() {
        super("GetFileContentsResponse", [
            { no: 1, name: "statusCode", kind: "enum", T: () => ["GetFileStatusCode", GetFileStatusCode] },
            { no: 2, name: "fileData", kind: "message", T: () => FileData },
            { no: 3, name: "fileBytes", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<GetFileContentsResponse>): GetFileContentsResponse {
        const message = { statusCode: 0, fileBytes: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetFileContentsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetFileContentsResponse): GetFileContentsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* GetFileStatusCode statusCode */ 1:
                    message.statusCode = reader.int32();
                    break;
                case /* FileData fileData */ 2:
                    message.fileData = FileData.internalBinaryRead(reader, reader.uint32(), options, message.fileData);
                    break;
                case /* bytes fileBytes */ 3:
                    message.fileBytes = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetFileContentsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* GetFileStatusCode statusCode = 1; */
        if (message.statusCode !== 0)
            writer.tag(1, WireType.Varint).int32(message.statusCode);
        /* FileData fileData = 2; */
        if (message.fileData)
            FileData.internalBinaryWrite(message.fileData, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bytes fileBytes = 3; */
        if (message.fileBytes.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.fileBytes);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetFileContentsResponse
 */
export const GetFileContentsResponse = new GetFileContentsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WriteFileDataCommand$Type extends MessageType<WriteFileDataCommand> {
    constructor() {
        super("WriteFileDataCommand", [
            { no: 1, name: "fileData", kind: "message", T: () => FileData },
            { no: 2, name: "fileBytes", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<WriteFileDataCommand>): WriteFileDataCommand {
        const message = { fileBytes: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WriteFileDataCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WriteFileDataCommand): WriteFileDataCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* FileData fileData */ 1:
                    message.fileData = FileData.internalBinaryRead(reader, reader.uint32(), options, message.fileData);
                    break;
                case /* bytes fileBytes */ 2:
                    message.fileBytes = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WriteFileDataCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* FileData fileData = 1; */
        if (message.fileData)
            FileData.internalBinaryWrite(message.fileData, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bytes fileBytes = 2; */
        if (message.fileBytes.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.fileBytes);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WriteFileDataCommand
 */
export const WriteFileDataCommand = new WriteFileDataCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WriteFileDataResponse$Type extends MessageType<WriteFileDataResponse> {
    constructor() {
        super("WriteFileDataResponse", [
            { no: 1, name: "statusCode", kind: "enum", T: () => ["WriteFileDataStatusCode", WriteFileDataStatusCode] },
            { no: 2, name: "command", kind: "message", T: () => FileData }
        ]);
    }
    create(value?: PartialMessage<WriteFileDataResponse>): WriteFileDataResponse {
        const message = { statusCode: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WriteFileDataResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WriteFileDataResponse): WriteFileDataResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* WriteFileDataStatusCode statusCode */ 1:
                    message.statusCode = reader.int32();
                    break;
                case /* FileData command */ 2:
                    message.command = FileData.internalBinaryRead(reader, reader.uint32(), options, message.command);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WriteFileDataResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* WriteFileDataStatusCode statusCode = 1; */
        if (message.statusCode !== 0)
            writer.tag(1, WireType.Varint).int32(message.statusCode);
        /* FileData command = 2; */
        if (message.command)
            FileData.internalBinaryWrite(message.command, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WriteFileDataResponse
 */
export const WriteFileDataResponse = new WriteFileDataResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FileSystemCommand$Type extends MessageType<FileSystemCommand> {
    constructor() {
        super("FileSystemCommand", [
            { no: 1, name: "getFileContentsCommand", kind: "message", oneof: "command", T: () => GetFileContentsCommand },
            { no: 2, name: "writeFileDataCommand", kind: "message", oneof: "command", T: () => WriteFileDataCommand },
            { no: 4, name: "reportFileDataCommand", kind: "message", oneof: "command", T: () => ReportFileDataCommand },
            { no: 5, name: "rmFileCommand", kind: "message", oneof: "command", T: () => RmFileCommand },
            { no: 9, name: "listDirContentsCommand", kind: "message", oneof: "command", T: () => ListDirContentsCommand },
            { no: 10, name: "mkDirCommand", kind: "message", oneof: "command", T: () => MkDirCommand },
            { no: 11, name: "rmDirCommand", kind: "message", oneof: "command", T: () => RmDirCommand },
            { no: 15, name: "resetFilesystemCommand", kind: "message", oneof: "command", T: () => ResetFilesystemCommand }
        ]);
    }
    create(value?: PartialMessage<FileSystemCommand>): FileSystemCommand {
        const message = { command: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FileSystemCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FileSystemCommand): FileSystemCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* GetFileContentsCommand getFileContentsCommand */ 1:
                    message.command = {
                        oneofKind: "getFileContentsCommand",
                        getFileContentsCommand: GetFileContentsCommand.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).getFileContentsCommand)
                    };
                    break;
                case /* WriteFileDataCommand writeFileDataCommand */ 2:
                    message.command = {
                        oneofKind: "writeFileDataCommand",
                        writeFileDataCommand: WriteFileDataCommand.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).writeFileDataCommand)
                    };
                    break;
                case /* ReportFileDataCommand reportFileDataCommand */ 4:
                    message.command = {
                        oneofKind: "reportFileDataCommand",
                        reportFileDataCommand: ReportFileDataCommand.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).reportFileDataCommand)
                    };
                    break;
                case /* RmFileCommand rmFileCommand */ 5:
                    message.command = {
                        oneofKind: "rmFileCommand",
                        rmFileCommand: RmFileCommand.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).rmFileCommand)
                    };
                    break;
                case /* ListDirContentsCommand listDirContentsCommand */ 9:
                    message.command = {
                        oneofKind: "listDirContentsCommand",
                        listDirContentsCommand: ListDirContentsCommand.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).listDirContentsCommand)
                    };
                    break;
                case /* MkDirCommand mkDirCommand */ 10:
                    message.command = {
                        oneofKind: "mkDirCommand",
                        mkDirCommand: MkDirCommand.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).mkDirCommand)
                    };
                    break;
                case /* RmDirCommand rmDirCommand */ 11:
                    message.command = {
                        oneofKind: "rmDirCommand",
                        rmDirCommand: RmDirCommand.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).rmDirCommand)
                    };
                    break;
                case /* ResetFilesystemCommand resetFilesystemCommand */ 15:
                    message.command = {
                        oneofKind: "resetFilesystemCommand",
                        resetFilesystemCommand: ResetFilesystemCommand.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).resetFilesystemCommand)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FileSystemCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* GetFileContentsCommand getFileContentsCommand = 1; */
        if (message.command.oneofKind === "getFileContentsCommand")
            GetFileContentsCommand.internalBinaryWrite(message.command.getFileContentsCommand, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* WriteFileDataCommand writeFileDataCommand = 2; */
        if (message.command.oneofKind === "writeFileDataCommand")
            WriteFileDataCommand.internalBinaryWrite(message.command.writeFileDataCommand, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* ReportFileDataCommand reportFileDataCommand = 4; */
        if (message.command.oneofKind === "reportFileDataCommand")
            ReportFileDataCommand.internalBinaryWrite(message.command.reportFileDataCommand, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* RmFileCommand rmFileCommand = 5; */
        if (message.command.oneofKind === "rmFileCommand")
            RmFileCommand.internalBinaryWrite(message.command.rmFileCommand, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* ListDirContentsCommand listDirContentsCommand = 9; */
        if (message.command.oneofKind === "listDirContentsCommand")
            ListDirContentsCommand.internalBinaryWrite(message.command.listDirContentsCommand, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* MkDirCommand mkDirCommand = 10; */
        if (message.command.oneofKind === "mkDirCommand")
            MkDirCommand.internalBinaryWrite(message.command.mkDirCommand, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* RmDirCommand rmDirCommand = 11; */
        if (message.command.oneofKind === "rmDirCommand")
            RmDirCommand.internalBinaryWrite(message.command.rmDirCommand, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* ResetFilesystemCommand resetFilesystemCommand = 15; */
        if (message.command.oneofKind === "resetFilesystemCommand")
            ResetFilesystemCommand.internalBinaryWrite(message.command.resetFilesystemCommand, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FileSystemCommand
 */
export const FileSystemCommand = new FileSystemCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FileSystemResponse$Type extends MessageType<FileSystemResponse> {
    constructor() {
        super("FileSystemResponse", [
            { no: 1, name: "getFileContentsResponse", kind: "message", oneof: "response", T: () => GetFileContentsResponse },
            { no: 2, name: "writeFileDataResponse", kind: "message", oneof: "response", T: () => WriteFileDataResponse },
            { no: 4, name: "reportFileDataResponse", kind: "message", oneof: "response", T: () => ReportFileDataResponse },
            { no: 5, name: "rmFileCommand", kind: "message", oneof: "response", T: () => RmFileResponse },
            { no: 9, name: "listDirContentsResponse", kind: "message", oneof: "response", T: () => ListDirContentsResponse },
            { no: 10, name: "mkDirResponse", kind: "message", oneof: "response", T: () => MkDirResponse },
            { no: 11, name: "rmDirResponse", kind: "message", oneof: "response", T: () => RmDirResponse },
            { no: 15, name: "resetFilesystemResponse", kind: "message", oneof: "response", T: () => ResetFilesystemResponse }
        ]);
    }
    create(value?: PartialMessage<FileSystemResponse>): FileSystemResponse {
        const message = { response: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FileSystemResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FileSystemResponse): FileSystemResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* GetFileContentsResponse getFileContentsResponse */ 1:
                    message.response = {
                        oneofKind: "getFileContentsResponse",
                        getFileContentsResponse: GetFileContentsResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).getFileContentsResponse)
                    };
                    break;
                case /* WriteFileDataResponse writeFileDataResponse */ 2:
                    message.response = {
                        oneofKind: "writeFileDataResponse",
                        writeFileDataResponse: WriteFileDataResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).writeFileDataResponse)
                    };
                    break;
                case /* ReportFileDataResponse reportFileDataResponse */ 4:
                    message.response = {
                        oneofKind: "reportFileDataResponse",
                        reportFileDataResponse: ReportFileDataResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).reportFileDataResponse)
                    };
                    break;
                case /* RmFileResponse rmFileCommand */ 5:
                    message.response = {
                        oneofKind: "rmFileCommand",
                        rmFileCommand: RmFileResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).rmFileCommand)
                    };
                    break;
                case /* ListDirContentsResponse listDirContentsResponse */ 9:
                    message.response = {
                        oneofKind: "listDirContentsResponse",
                        listDirContentsResponse: ListDirContentsResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).listDirContentsResponse)
                    };
                    break;
                case /* MkDirResponse mkDirResponse */ 10:
                    message.response = {
                        oneofKind: "mkDirResponse",
                        mkDirResponse: MkDirResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).mkDirResponse)
                    };
                    break;
                case /* RmDirResponse rmDirResponse */ 11:
                    message.response = {
                        oneofKind: "rmDirResponse",
                        rmDirResponse: RmDirResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).rmDirResponse)
                    };
                    break;
                case /* ResetFilesystemResponse resetFilesystemResponse */ 15:
                    message.response = {
                        oneofKind: "resetFilesystemResponse",
                        resetFilesystemResponse: ResetFilesystemResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).resetFilesystemResponse)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FileSystemResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* GetFileContentsResponse getFileContentsResponse = 1; */
        if (message.response.oneofKind === "getFileContentsResponse")
            GetFileContentsResponse.internalBinaryWrite(message.response.getFileContentsResponse, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* WriteFileDataResponse writeFileDataResponse = 2; */
        if (message.response.oneofKind === "writeFileDataResponse")
            WriteFileDataResponse.internalBinaryWrite(message.response.writeFileDataResponse, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* ReportFileDataResponse reportFileDataResponse = 4; */
        if (message.response.oneofKind === "reportFileDataResponse")
            ReportFileDataResponse.internalBinaryWrite(message.response.reportFileDataResponse, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* RmFileResponse rmFileCommand = 5; */
        if (message.response.oneofKind === "rmFileCommand")
            RmFileResponse.internalBinaryWrite(message.response.rmFileCommand, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* ListDirContentsResponse listDirContentsResponse = 9; */
        if (message.response.oneofKind === "listDirContentsResponse")
            ListDirContentsResponse.internalBinaryWrite(message.response.listDirContentsResponse, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* MkDirResponse mkDirResponse = 10; */
        if (message.response.oneofKind === "mkDirResponse")
            MkDirResponse.internalBinaryWrite(message.response.mkDirResponse, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* RmDirResponse rmDirResponse = 11; */
        if (message.response.oneofKind === "rmDirResponse")
            RmDirResponse.internalBinaryWrite(message.response.rmDirResponse, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* ResetFilesystemResponse resetFilesystemResponse = 15; */
        if (message.response.oneofKind === "resetFilesystemResponse")
            ResetFilesystemResponse.internalBinaryWrite(message.response.resetFilesystemResponse, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FileSystemResponse
 */
export const FileSystemResponse = new FileSystemResponse$Type();
