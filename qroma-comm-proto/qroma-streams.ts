// @generated by protobuf-ts 2.8.2 with parameter use_proto_field_name,generate_dependencies
// @generated from protobuf file "qroma-streams.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { FileData } from "./qroma-types";
/**
 * @generated from protobuf message InitWriteFileStreamCommand
 */
export interface InitWriteFileStreamCommand {
    /**
     * @generated from protobuf field: FileData fileData = 1;
     */
    fileData?: FileData;
    /**
     * @generated from protobuf field: uint32 fileStreamId = 2;
     */
    fileStreamId: number;
}
/**
 * @generated from protobuf message InitWriteFileStreamAckResponse
 */
export interface InitWriteFileStreamAckResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * @generated from protobuf field: uint32 fileStreamId = 2;
     */
    fileStreamId: number;
    /**
     * @generated from protobuf field: string message = 3;
     */
    message: string; // FileData fileData = 4;
}
/**
 * @generated from protobuf message WriteFileStreamCompleteResponse
 */
export interface WriteFileStreamCompleteResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * @generated from protobuf field: uint32 fileStreamId = 2;
     */
    fileStreamId: number;
    /**
     * @generated from protobuf field: string message = 3;
     */
    message: string;
    /**
     * @generated from protobuf field: FileData fileData = 4;
     */
    fileData?: FileData;
}
/**
 * @generated from protobuf message QromaStreamCommand
 */
export interface QromaStreamCommand {
    /**
     * @generated from protobuf oneof: command
     */
    command: {
        oneofKind: "initWriteFileStreamCommand";
        /**
         * @generated from protobuf field: InitWriteFileStreamCommand initWriteFileStreamCommand = 1;
         */
        initWriteFileStreamCommand: InitWriteFileStreamCommand;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message QromaStreamResponse
 */
export interface QromaStreamResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "initWriteFileStreamAckResponse";
        /**
         * @generated from protobuf field: InitWriteFileStreamAckResponse initWriteFileStreamAckResponse = 1;
         */
        initWriteFileStreamAckResponse: InitWriteFileStreamAckResponse;
    } | {
        oneofKind: "writeFileStreamCompleteResponse";
        /**
         * @generated from protobuf field: WriteFileStreamCompleteResponse writeFileStreamCompleteResponse = 2;
         */
        writeFileStreamCompleteResponse: WriteFileStreamCompleteResponse;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class InitWriteFileStreamCommand$Type extends MessageType<InitWriteFileStreamCommand> {
    constructor() {
        super("InitWriteFileStreamCommand", [
            { no: 1, name: "fileData", kind: "message", T: () => FileData },
            { no: 2, name: "fileStreamId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<InitWriteFileStreamCommand>): InitWriteFileStreamCommand {
        const message = { fileStreamId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InitWriteFileStreamCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InitWriteFileStreamCommand): InitWriteFileStreamCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* FileData fileData */ 1:
                    message.fileData = FileData.internalBinaryRead(reader, reader.uint32(), options, message.fileData);
                    break;
                case /* uint32 fileStreamId */ 2:
                    message.fileStreamId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InitWriteFileStreamCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* FileData fileData = 1; */
        if (message.fileData)
            FileData.internalBinaryWrite(message.fileData, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 fileStreamId = 2; */
        if (message.fileStreamId !== 0)
            writer.tag(2, WireType.Varint).uint32(message.fileStreamId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InitWriteFileStreamCommand
 */
export const InitWriteFileStreamCommand = new InitWriteFileStreamCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InitWriteFileStreamAckResponse$Type extends MessageType<InitWriteFileStreamAckResponse> {
    constructor() {
        super("InitWriteFileStreamAckResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "fileStreamId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InitWriteFileStreamAckResponse>): InitWriteFileStreamAckResponse {
        const message = { success: false, fileStreamId: 0, message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InitWriteFileStreamAckResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InitWriteFileStreamAckResponse): InitWriteFileStreamAckResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* uint32 fileStreamId */ 2:
                    message.fileStreamId = reader.uint32();
                    break;
                case /* string message */ 3:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InitWriteFileStreamAckResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* uint32 fileStreamId = 2; */
        if (message.fileStreamId !== 0)
            writer.tag(2, WireType.Varint).uint32(message.fileStreamId);
        /* string message = 3; */
        if (message.message !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InitWriteFileStreamAckResponse
 */
export const InitWriteFileStreamAckResponse = new InitWriteFileStreamAckResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WriteFileStreamCompleteResponse$Type extends MessageType<WriteFileStreamCompleteResponse> {
    constructor() {
        super("WriteFileStreamCompleteResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "fileStreamId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "fileData", kind: "message", T: () => FileData }
        ]);
    }
    create(value?: PartialMessage<WriteFileStreamCompleteResponse>): WriteFileStreamCompleteResponse {
        const message = { success: false, fileStreamId: 0, message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WriteFileStreamCompleteResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WriteFileStreamCompleteResponse): WriteFileStreamCompleteResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* uint32 fileStreamId */ 2:
                    message.fileStreamId = reader.uint32();
                    break;
                case /* string message */ 3:
                    message.message = reader.string();
                    break;
                case /* FileData fileData */ 4:
                    message.fileData = FileData.internalBinaryRead(reader, reader.uint32(), options, message.fileData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WriteFileStreamCompleteResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* uint32 fileStreamId = 2; */
        if (message.fileStreamId !== 0)
            writer.tag(2, WireType.Varint).uint32(message.fileStreamId);
        /* string message = 3; */
        if (message.message !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.message);
        /* FileData fileData = 4; */
        if (message.fileData)
            FileData.internalBinaryWrite(message.fileData, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WriteFileStreamCompleteResponse
 */
export const WriteFileStreamCompleteResponse = new WriteFileStreamCompleteResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QromaStreamCommand$Type extends MessageType<QromaStreamCommand> {
    constructor() {
        super("QromaStreamCommand", [
            { no: 1, name: "initWriteFileStreamCommand", kind: "message", oneof: "command", T: () => InitWriteFileStreamCommand }
        ]);
    }
    create(value?: PartialMessage<QromaStreamCommand>): QromaStreamCommand {
        const message = { command: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QromaStreamCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaStreamCommand): QromaStreamCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* InitWriteFileStreamCommand initWriteFileStreamCommand */ 1:
                    message.command = {
                        oneofKind: "initWriteFileStreamCommand",
                        initWriteFileStreamCommand: InitWriteFileStreamCommand.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).initWriteFileStreamCommand)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QromaStreamCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* InitWriteFileStreamCommand initWriteFileStreamCommand = 1; */
        if (message.command.oneofKind === "initWriteFileStreamCommand")
            InitWriteFileStreamCommand.internalBinaryWrite(message.command.initWriteFileStreamCommand, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaStreamCommand
 */
export const QromaStreamCommand = new QromaStreamCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QromaStreamResponse$Type extends MessageType<QromaStreamResponse> {
    constructor() {
        super("QromaStreamResponse", [
            { no: 1, name: "initWriteFileStreamAckResponse", kind: "message", oneof: "response", T: () => InitWriteFileStreamAckResponse },
            { no: 2, name: "writeFileStreamCompleteResponse", kind: "message", oneof: "response", T: () => WriteFileStreamCompleteResponse }
        ]);
    }
    create(value?: PartialMessage<QromaStreamResponse>): QromaStreamResponse {
        const message = { response: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QromaStreamResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaStreamResponse): QromaStreamResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* InitWriteFileStreamAckResponse initWriteFileStreamAckResponse */ 1:
                    message.response = {
                        oneofKind: "initWriteFileStreamAckResponse",
                        initWriteFileStreamAckResponse: InitWriteFileStreamAckResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).initWriteFileStreamAckResponse)
                    };
                    break;
                case /* WriteFileStreamCompleteResponse writeFileStreamCompleteResponse */ 2:
                    message.response = {
                        oneofKind: "writeFileStreamCompleteResponse",
                        writeFileStreamCompleteResponse: WriteFileStreamCompleteResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).writeFileStreamCompleteResponse)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QromaStreamResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* InitWriteFileStreamAckResponse initWriteFileStreamAckResponse = 1; */
        if (message.response.oneofKind === "initWriteFileStreamAckResponse")
            InitWriteFileStreamAckResponse.internalBinaryWrite(message.response.initWriteFileStreamAckResponse, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* WriteFileStreamCompleteResponse writeFileStreamCompleteResponse = 2; */
        if (message.response.oneofKind === "writeFileStreamCompleteResponse")
            WriteFileStreamCompleteResponse.internalBinaryWrite(message.response.writeFileStreamCompleteResponse, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaStreamResponse
 */
export const QromaStreamResponse = new QromaStreamResponse$Type();
