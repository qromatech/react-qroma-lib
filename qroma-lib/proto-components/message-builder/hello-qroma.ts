// @generated by protobuf-ts 2.8.2 with parameter use_proto_field_name,generate_dependencies
// @generated from protobuf file "hello-qroma.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message HelloQromaRequest
 */
export interface HelloQromaRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message HelloQromaResponse
 */
export interface HelloQromaResponse {
    /**
     * @generated from protobuf field: string response = 1;
     */
    response: string;
    /**
     * @generated from protobuf field: uint32 callCount = 2;
     */
    callCount: number;
    /**
     * @generated from protobuf field: uint32 nameLength = 3;
     */
    nameLength: number;
}
/**
 * @generated from protobuf message MathRequest
 */
export interface MathRequest {
    /**
     * @generated from protobuf field: uint32 a = 1;
     */
    a: number;
    /**
     * @generated from protobuf field: uint32 b = 2;
     */
    b: number;
    /**
     * @generated from protobuf field: MathOperation op = 3;
     */
    op: MathOperation;
}
/**
 * @generated from protobuf message MathResult_Add
 */
export interface MathResult_Add {
    /**
     * @generated from protobuf field: uint32 result = 1;
     */
    result: number;
}
/**
 * @generated from protobuf message MathResult_Subtract
 */
export interface MathResult_Subtract {
    /**
     * @generated from protobuf field: uint32 result = 1;
     */
    result: number;
}
/**
 * @generated from protobuf message MathResult_AddAndSubtract
 */
export interface MathResult_AddAndSubtract {
    /**
     * @generated from protobuf field: uint32 addResult = 1;
     */
    addResult: number;
    /**
     * @generated from protobuf field: uint32 subtractResult = 2;
     */
    subtractResult: number;
}
/**
 * @generated from protobuf message MathResponse
 */
export interface MathResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "addResult";
        /**
         * @generated from protobuf field: MathResult_Add addResult = 1;
         */
        addResult: MathResult_Add;
    } | {
        oneofKind: "subtractResult";
        /**
         * @generated from protobuf field: MathResult_Subtract subtractResult = 2;
         */
        subtractResult: MathResult_Subtract;
    } | {
        oneofKind: "addAndSubtractResult";
        /**
         * @generated from protobuf field: MathResult_AddAndSubtract addAndSubtractResult = 3;
         */
        addAndSubtractResult: MathResult_AddAndSubtract;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message SetUpdateConfiguration
 */
export interface SetUpdateConfiguration {
    /**
     * @generated from protobuf field: UpdateType updateType = 1;
     */
    updateType: UpdateType;
    /**
     * @generated from protobuf field: uint32 updateIntervalInMs = 2;
     */
    updateIntervalInMs: number;
}
/**
 * @generated from protobuf message SetUpdateConfigurationResponse
 */
export interface SetUpdateConfigurationResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
}
/**
 * @generated from protobuf message SetUpdateProgressIndicator
 */
export interface SetUpdateProgressIndicator {
    /**
     * @generated from protobuf field: string indicatorChars = 1;
     */
    indicatorChars: string;
}
/**
 * @generated from protobuf message SetUpdateProgressIndicatorResponse
 */
export interface SetUpdateProgressIndicatorResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * @generated from protobuf field: string statusMessage = 2;
     */
    statusMessage: string;
}
/**
 * @generated from protobuf message UptimeUpdateResponse
 */
export interface UptimeUpdateResponse {
    /**
     * @generated from protobuf field: uint32 uptime = 1;
     */
    uptime: number;
}
/**
 * @generated from protobuf message ProgressIndicatorUpdateResponse
 */
export interface ProgressIndicatorUpdateResponse {
    /**
     * @generated from protobuf field: string progressIndicator = 1;
     */
    progressIndicator: string;
}
/**
 * @generated from protobuf message UpdateResponse
 */
export interface UpdateResponse {
    /**
     * @generated from protobuf oneof: update
     */
    update: {
        oneofKind: "uptimeUpdateResponse";
        /**
         * @generated from protobuf field: UptimeUpdateResponse uptimeUpdateResponse = 1;
         */
        uptimeUpdateResponse: UptimeUpdateResponse;
    } | {
        oneofKind: "progressIndicatorUpdateResponse";
        /**
         * @generated from protobuf field: ProgressIndicatorUpdateResponse progressIndicatorUpdateResponse = 2;
         */
        progressIndicatorUpdateResponse: ProgressIndicatorUpdateResponse;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message PingRequest
 */
export interface PingRequest {
    /**
     * @generated from protobuf field: uint32 pingId = 1;
     */
    pingId: number;
}
/**
 * @generated from protobuf message PingResponse
 */
export interface PingResponse {
    /**
     * @generated from protobuf field: uint32 pingId = 1;
     */
    pingId: number;
    /**
     * @generated from protobuf field: uint32 uptime = 2;
     */
    uptime: number;
}
/**
 * @generated from protobuf message GetBoardDetailsRequest
 */
export interface GetBoardDetailsRequest {
    /**
     * @generated from protobuf field: bool ignoreThis = 1;
     */
    ignoreThis: boolean;
}
/**
 * @generated from protobuf message FirmwareDetails
 */
export interface FirmwareDetails {
    /**
     * @generated from protobuf field: string version = 1;
     */
    version: string;
    /**
     * @generated from protobuf field: string buildTime = 2;
     */
    buildTime: string;
}
/**
 * @generated from protobuf message GetBoardDetailsResponse
 */
export interface GetBoardDetailsResponse {
    /**
     * @generated from protobuf field: string boardName = 1;
     */
    boardName: string;
    /**
     * @generated from protobuf field: FirmwareDetails firmwareDetails = 2;
     */
    firmwareDetails?: FirmwareDetails;
}
/**
 * @generated from protobuf message SetBoardLightColorRequest
 */
export interface SetBoardLightColorRequest {
    /**
     * @generated from protobuf field: uint32 red = 1;
     */
    red: number;
    /**
     * @generated from protobuf field: uint32 green = 2;
     */
    green: number;
    /**
     * @generated from protobuf field: uint32 blue = 3;
     */
    blue: number;
}
/**
 * @generated from protobuf message SetBoardLightColorResponse
 */
export interface SetBoardLightColorResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
}
/**
 * @generated from protobuf message InvalidCommandResponse
 */
export interface InvalidCommandResponse {
    /**
     * @generated from protobuf field: bool unhandled = 1;
     */
    unhandled: boolean;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
}
/**
 * @generated from protobuf message MyAppCommand
 */
export interface MyAppCommand {
    /**
     * @generated from protobuf oneof: command
     */
    command: {
        oneofKind: "noArgCommand";
        /**
         * @generated from protobuf field: NoArgCommands noArgCommand = 1;
         */
        noArgCommand: NoArgCommands;
    } | {
        oneofKind: "helloQromaRequest";
        /**
         * @generated from protobuf field: HelloQromaRequest helloQromaRequest = 2;
         */
        helloQromaRequest: HelloQromaRequest;
    } | {
        oneofKind: "mathRequest";
        /**
         * @generated from protobuf field: MathRequest mathRequest = 3;
         */
        mathRequest: MathRequest;
    } | {
        oneofKind: "setUpdateConfiguration";
        /**
         * @generated from protobuf field: SetUpdateConfiguration setUpdateConfiguration = 4;
         */
        setUpdateConfiguration: SetUpdateConfiguration;
    } | {
        oneofKind: "setUpdateProgressIndicator";
        /**
         * @generated from protobuf field: SetUpdateProgressIndicator setUpdateProgressIndicator = 5;
         */
        setUpdateProgressIndicator: SetUpdateProgressIndicator;
    } | {
        oneofKind: "pingRequest";
        /**
         * @generated from protobuf field: PingRequest pingRequest = 6;
         */
        pingRequest: PingRequest;
    } | {
        oneofKind: "getBoardDetailsRequest";
        /**
         * @generated from protobuf field: GetBoardDetailsRequest getBoardDetailsRequest = 7;
         */
        getBoardDetailsRequest: GetBoardDetailsRequest;
    } | {
        oneofKind: "setBoardLightColorRequest";
        /**
         * @generated from protobuf field: SetBoardLightColorRequest setBoardLightColorRequest = 8;
         */
        setBoardLightColorRequest: SetBoardLightColorRequest;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message MyAppResponse
 */
export interface MyAppResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "invalidCommandResponse";
        /**
         * @generated from protobuf field: InvalidCommandResponse invalidCommandResponse = 1;
         */
        invalidCommandResponse: InvalidCommandResponse;
    } | {
        oneofKind: "helloQromaResponse";
        /**
         * @generated from protobuf field: HelloQromaResponse helloQromaResponse = 2;
         */
        helloQromaResponse: HelloQromaResponse;
    } | {
        oneofKind: "mathResponse";
        /**
         * @generated from protobuf field: MathResponse mathResponse = 3;
         */
        mathResponse: MathResponse;
    } | {
        oneofKind: "setUpdateConfigurationResponse";
        /**
         * @generated from protobuf field: SetUpdateConfigurationResponse setUpdateConfigurationResponse = 4;
         */
        setUpdateConfigurationResponse: SetUpdateConfigurationResponse;
    } | {
        oneofKind: "setUpdateProgressIndicatorResponse";
        /**
         * @generated from protobuf field: SetUpdateProgressIndicatorResponse setUpdateProgressIndicatorResponse = 5;
         */
        setUpdateProgressIndicatorResponse: SetUpdateProgressIndicatorResponse;
    } | {
        oneofKind: "pingResponse";
        /**
         * @generated from protobuf field: PingResponse pingResponse = 6;
         */
        pingResponse: PingResponse;
    } | {
        oneofKind: "updateResponse";
        /**
         * @generated from protobuf field: UpdateResponse updateResponse = 7;
         */
        updateResponse: UpdateResponse;
    } | {
        oneofKind: "setBoardLightColorResponse";
        /**
         * @generated from protobuf field: SetBoardLightColorResponse setBoardLightColorResponse = 8;
         */
        setBoardLightColorResponse: SetBoardLightColorResponse;
    } | {
        oneofKind: "getBoardDetailsResponse";
        /**
         * @generated from protobuf field: GetBoardDetailsResponse getBoardDetailsResponse = 9;
         */
        getBoardDetailsResponse: GetBoardDetailsResponse;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum MathOperation
 */
export enum MathOperation {
    /**
     * @generated from protobuf enum value: MathOp_NotSet = 0;
     */
    MathOp_NotSet = 0,
    /**
     * @generated from protobuf enum value: MathOp_Add = 1;
     */
    MathOp_Add = 1,
    /**
     * @generated from protobuf enum value: MathOp_Subtract = 2;
     */
    MathOp_Subtract = 2,
    /**
     * @generated from protobuf enum value: MathOp_Add_And_Subtract = 3;
     */
    MathOp_Add_And_Subtract = 3
}
/**
 * @generated from protobuf enum UpdateType
 */
export enum UpdateType {
    /**
     * @generated from protobuf enum value: UpdateType_NotSet = 0;
     */
    UpdateType_NotSet = 0,
    /**
     * @generated from protobuf enum value: UpdateType_None = 1;
     */
    UpdateType_None = 1,
    /**
     * @generated from protobuf enum value: UpdateType_Interval = 2;
     */
    UpdateType_Interval = 2,
    /**
     * @generated from protobuf enum value: UpdateType_ProgressIndicator = 3;
     */
    UpdateType_ProgressIndicator = 3
}
/**
 * @generated from protobuf enum NoArgCommands
 */
export enum NoArgCommands {
    /**
     * @generated from protobuf enum value: Nac_NotSet = 0;
     */
    Nac_NotSet = 0,
    /**
     * @generated from protobuf enum value: Nac_GetBoardDetailsRequest = 1;
     */
    Nac_GetBoardDetailsRequest = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class HelloQromaRequest$Type extends MessageType<HelloQromaRequest> {
    constructor() {
        super("HelloQromaRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HelloQromaRequest>): HelloQromaRequest {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HelloQromaRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HelloQromaRequest): HelloQromaRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HelloQromaRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message HelloQromaRequest
 */
export const HelloQromaRequest = new HelloQromaRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HelloQromaResponse$Type extends MessageType<HelloQromaResponse> {
    constructor() {
        super("HelloQromaResponse", [
            { no: 1, name: "response", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "callCount", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "nameLength", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<HelloQromaResponse>): HelloQromaResponse {
        const message = { response: "", callCount: 0, nameLength: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HelloQromaResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HelloQromaResponse): HelloQromaResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string response */ 1:
                    message.response = reader.string();
                    break;
                case /* uint32 callCount */ 2:
                    message.callCount = reader.uint32();
                    break;
                case /* uint32 nameLength */ 3:
                    message.nameLength = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HelloQromaResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string response = 1; */
        if (message.response !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.response);
        /* uint32 callCount = 2; */
        if (message.callCount !== 0)
            writer.tag(2, WireType.Varint).uint32(message.callCount);
        /* uint32 nameLength = 3; */
        if (message.nameLength !== 0)
            writer.tag(3, WireType.Varint).uint32(message.nameLength);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message HelloQromaResponse
 */
export const HelloQromaResponse = new HelloQromaResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MathRequest$Type extends MessageType<MathRequest> {
    constructor() {
        super("MathRequest", [
            { no: 1, name: "a", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "b", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "op", kind: "enum", T: () => ["MathOperation", MathOperation] }
        ]);
    }
    create(value?: PartialMessage<MathRequest>): MathRequest {
        const message = { a: 0, b: 0, op: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MathRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MathRequest): MathRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 a */ 1:
                    message.a = reader.uint32();
                    break;
                case /* uint32 b */ 2:
                    message.b = reader.uint32();
                    break;
                case /* MathOperation op */ 3:
                    message.op = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MathRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 a = 1; */
        if (message.a !== 0)
            writer.tag(1, WireType.Varint).uint32(message.a);
        /* uint32 b = 2; */
        if (message.b !== 0)
            writer.tag(2, WireType.Varint).uint32(message.b);
        /* MathOperation op = 3; */
        if (message.op !== 0)
            writer.tag(3, WireType.Varint).int32(message.op);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MathRequest
 */
export const MathRequest = new MathRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MathResult_Add$Type extends MessageType<MathResult_Add> {
    constructor() {
        super("MathResult_Add", [
            { no: 1, name: "result", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MathResult_Add>): MathResult_Add {
        const message = { result: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MathResult_Add>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MathResult_Add): MathResult_Add {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 result */ 1:
                    message.result = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MathResult_Add, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 result = 1; */
        if (message.result !== 0)
            writer.tag(1, WireType.Varint).uint32(message.result);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MathResult_Add
 */
export const MathResult_Add = new MathResult_Add$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MathResult_Subtract$Type extends MessageType<MathResult_Subtract> {
    constructor() {
        super("MathResult_Subtract", [
            { no: 1, name: "result", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MathResult_Subtract>): MathResult_Subtract {
        const message = { result: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MathResult_Subtract>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MathResult_Subtract): MathResult_Subtract {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 result */ 1:
                    message.result = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MathResult_Subtract, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 result = 1; */
        if (message.result !== 0)
            writer.tag(1, WireType.Varint).uint32(message.result);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MathResult_Subtract
 */
export const MathResult_Subtract = new MathResult_Subtract$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MathResult_AddAndSubtract$Type extends MessageType<MathResult_AddAndSubtract> {
    constructor() {
        super("MathResult_AddAndSubtract", [
            { no: 1, name: "addResult", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "subtractResult", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MathResult_AddAndSubtract>): MathResult_AddAndSubtract {
        const message = { addResult: 0, subtractResult: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MathResult_AddAndSubtract>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MathResult_AddAndSubtract): MathResult_AddAndSubtract {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 addResult */ 1:
                    message.addResult = reader.uint32();
                    break;
                case /* uint32 subtractResult */ 2:
                    message.subtractResult = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MathResult_AddAndSubtract, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 addResult = 1; */
        if (message.addResult !== 0)
            writer.tag(1, WireType.Varint).uint32(message.addResult);
        /* uint32 subtractResult = 2; */
        if (message.subtractResult !== 0)
            writer.tag(2, WireType.Varint).uint32(message.subtractResult);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MathResult_AddAndSubtract
 */
export const MathResult_AddAndSubtract = new MathResult_AddAndSubtract$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MathResponse$Type extends MessageType<MathResponse> {
    constructor() {
        super("MathResponse", [
            { no: 1, name: "addResult", kind: "message", oneof: "response", T: () => MathResult_Add },
            { no: 2, name: "subtractResult", kind: "message", oneof: "response", T: () => MathResult_Subtract },
            { no: 3, name: "addAndSubtractResult", kind: "message", oneof: "response", T: () => MathResult_AddAndSubtract }
        ]);
    }
    create(value?: PartialMessage<MathResponse>): MathResponse {
        const message = { response: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MathResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MathResponse): MathResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MathResult_Add addResult */ 1:
                    message.response = {
                        oneofKind: "addResult",
                        addResult: MathResult_Add.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).addResult)
                    };
                    break;
                case /* MathResult_Subtract subtractResult */ 2:
                    message.response = {
                        oneofKind: "subtractResult",
                        subtractResult: MathResult_Subtract.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).subtractResult)
                    };
                    break;
                case /* MathResult_AddAndSubtract addAndSubtractResult */ 3:
                    message.response = {
                        oneofKind: "addAndSubtractResult",
                        addAndSubtractResult: MathResult_AddAndSubtract.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).addAndSubtractResult)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MathResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MathResult_Add addResult = 1; */
        if (message.response.oneofKind === "addResult")
            MathResult_Add.internalBinaryWrite(message.response.addResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* MathResult_Subtract subtractResult = 2; */
        if (message.response.oneofKind === "subtractResult")
            MathResult_Subtract.internalBinaryWrite(message.response.subtractResult, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* MathResult_AddAndSubtract addAndSubtractResult = 3; */
        if (message.response.oneofKind === "addAndSubtractResult")
            MathResult_AddAndSubtract.internalBinaryWrite(message.response.addAndSubtractResult, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MathResponse
 */
export const MathResponse = new MathResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetUpdateConfiguration$Type extends MessageType<SetUpdateConfiguration> {
    constructor() {
        super("SetUpdateConfiguration", [
            { no: 1, name: "updateType", kind: "enum", T: () => ["UpdateType", UpdateType] },
            { no: 2, name: "updateIntervalInMs", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SetUpdateConfiguration>): SetUpdateConfiguration {
        const message = { updateType: 0, updateIntervalInMs: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetUpdateConfiguration>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetUpdateConfiguration): SetUpdateConfiguration {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* UpdateType updateType */ 1:
                    message.updateType = reader.int32();
                    break;
                case /* uint32 updateIntervalInMs */ 2:
                    message.updateIntervalInMs = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetUpdateConfiguration, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* UpdateType updateType = 1; */
        if (message.updateType !== 0)
            writer.tag(1, WireType.Varint).int32(message.updateType);
        /* uint32 updateIntervalInMs = 2; */
        if (message.updateIntervalInMs !== 0)
            writer.tag(2, WireType.Varint).uint32(message.updateIntervalInMs);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetUpdateConfiguration
 */
export const SetUpdateConfiguration = new SetUpdateConfiguration$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetUpdateConfigurationResponse$Type extends MessageType<SetUpdateConfigurationResponse> {
    constructor() {
        super("SetUpdateConfigurationResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SetUpdateConfigurationResponse>): SetUpdateConfigurationResponse {
        const message = { success: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetUpdateConfigurationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetUpdateConfigurationResponse): SetUpdateConfigurationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetUpdateConfigurationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetUpdateConfigurationResponse
 */
export const SetUpdateConfigurationResponse = new SetUpdateConfigurationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetUpdateProgressIndicator$Type extends MessageType<SetUpdateProgressIndicator> {
    constructor() {
        super("SetUpdateProgressIndicator", [
            { no: 1, name: "indicatorChars", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SetUpdateProgressIndicator>): SetUpdateProgressIndicator {
        const message = { indicatorChars: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetUpdateProgressIndicator>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetUpdateProgressIndicator): SetUpdateProgressIndicator {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string indicatorChars */ 1:
                    message.indicatorChars = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetUpdateProgressIndicator, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string indicatorChars = 1; */
        if (message.indicatorChars !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.indicatorChars);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetUpdateProgressIndicator
 */
export const SetUpdateProgressIndicator = new SetUpdateProgressIndicator$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetUpdateProgressIndicatorResponse$Type extends MessageType<SetUpdateProgressIndicatorResponse> {
    constructor() {
        super("SetUpdateProgressIndicatorResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "statusMessage", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SetUpdateProgressIndicatorResponse>): SetUpdateProgressIndicatorResponse {
        const message = { success: false, statusMessage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetUpdateProgressIndicatorResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetUpdateProgressIndicatorResponse): SetUpdateProgressIndicatorResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* string statusMessage */ 2:
                    message.statusMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetUpdateProgressIndicatorResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* string statusMessage = 2; */
        if (message.statusMessage !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.statusMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetUpdateProgressIndicatorResponse
 */
export const SetUpdateProgressIndicatorResponse = new SetUpdateProgressIndicatorResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UptimeUpdateResponse$Type extends MessageType<UptimeUpdateResponse> {
    constructor() {
        super("UptimeUpdateResponse", [
            { no: 1, name: "uptime", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<UptimeUpdateResponse>): UptimeUpdateResponse {
        const message = { uptime: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UptimeUpdateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UptimeUpdateResponse): UptimeUpdateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 uptime */ 1:
                    message.uptime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UptimeUpdateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 uptime = 1; */
        if (message.uptime !== 0)
            writer.tag(1, WireType.Varint).uint32(message.uptime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UptimeUpdateResponse
 */
export const UptimeUpdateResponse = new UptimeUpdateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProgressIndicatorUpdateResponse$Type extends MessageType<ProgressIndicatorUpdateResponse> {
    constructor() {
        super("ProgressIndicatorUpdateResponse", [
            { no: 1, name: "progressIndicator", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ProgressIndicatorUpdateResponse>): ProgressIndicatorUpdateResponse {
        const message = { progressIndicator: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProgressIndicatorUpdateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProgressIndicatorUpdateResponse): ProgressIndicatorUpdateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string progressIndicator */ 1:
                    message.progressIndicator = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProgressIndicatorUpdateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string progressIndicator = 1; */
        if (message.progressIndicator !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.progressIndicator);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ProgressIndicatorUpdateResponse
 */
export const ProgressIndicatorUpdateResponse = new ProgressIndicatorUpdateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateResponse$Type extends MessageType<UpdateResponse> {
    constructor() {
        super("UpdateResponse", [
            { no: 1, name: "uptimeUpdateResponse", kind: "message", oneof: "update", T: () => UptimeUpdateResponse },
            { no: 2, name: "progressIndicatorUpdateResponse", kind: "message", oneof: "update", T: () => ProgressIndicatorUpdateResponse }
        ]);
    }
    create(value?: PartialMessage<UpdateResponse>): UpdateResponse {
        const message = { update: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateResponse): UpdateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* UptimeUpdateResponse uptimeUpdateResponse */ 1:
                    message.update = {
                        oneofKind: "uptimeUpdateResponse",
                        uptimeUpdateResponse: UptimeUpdateResponse.internalBinaryRead(reader, reader.uint32(), options, (message.update as any).uptimeUpdateResponse)
                    };
                    break;
                case /* ProgressIndicatorUpdateResponse progressIndicatorUpdateResponse */ 2:
                    message.update = {
                        oneofKind: "progressIndicatorUpdateResponse",
                        progressIndicatorUpdateResponse: ProgressIndicatorUpdateResponse.internalBinaryRead(reader, reader.uint32(), options, (message.update as any).progressIndicatorUpdateResponse)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* UptimeUpdateResponse uptimeUpdateResponse = 1; */
        if (message.update.oneofKind === "uptimeUpdateResponse")
            UptimeUpdateResponse.internalBinaryWrite(message.update.uptimeUpdateResponse, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ProgressIndicatorUpdateResponse progressIndicatorUpdateResponse = 2; */
        if (message.update.oneofKind === "progressIndicatorUpdateResponse")
            ProgressIndicatorUpdateResponse.internalBinaryWrite(message.update.progressIndicatorUpdateResponse, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateResponse
 */
export const UpdateResponse = new UpdateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PingRequest$Type extends MessageType<PingRequest> {
    constructor() {
        super("PingRequest", [
            { no: 1, name: "pingId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PingRequest>): PingRequest {
        const message = { pingId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PingRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PingRequest): PingRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 pingId */ 1:
                    message.pingId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PingRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 pingId = 1; */
        if (message.pingId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.pingId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PingRequest
 */
export const PingRequest = new PingRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PingResponse$Type extends MessageType<PingResponse> {
    constructor() {
        super("PingResponse", [
            { no: 1, name: "pingId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "uptime", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PingResponse>): PingResponse {
        const message = { pingId: 0, uptime: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PingResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PingResponse): PingResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 pingId */ 1:
                    message.pingId = reader.uint32();
                    break;
                case /* uint32 uptime */ 2:
                    message.uptime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PingResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 pingId = 1; */
        if (message.pingId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.pingId);
        /* uint32 uptime = 2; */
        if (message.uptime !== 0)
            writer.tag(2, WireType.Varint).uint32(message.uptime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PingResponse
 */
export const PingResponse = new PingResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBoardDetailsRequest$Type extends MessageType<GetBoardDetailsRequest> {
    constructor() {
        super("GetBoardDetailsRequest", [
            { no: 1, name: "ignoreThis", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GetBoardDetailsRequest>): GetBoardDetailsRequest {
        const message = { ignoreThis: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetBoardDetailsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBoardDetailsRequest): GetBoardDetailsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool ignoreThis */ 1:
                    message.ignoreThis = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBoardDetailsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool ignoreThis = 1; */
        if (message.ignoreThis !== false)
            writer.tag(1, WireType.Varint).bool(message.ignoreThis);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetBoardDetailsRequest
 */
export const GetBoardDetailsRequest = new GetBoardDetailsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FirmwareDetails$Type extends MessageType<FirmwareDetails> {
    constructor() {
        super("FirmwareDetails", [
            { no: 1, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "buildTime", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FirmwareDetails>): FirmwareDetails {
        const message = { version: "", buildTime: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FirmwareDetails>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FirmwareDetails): FirmwareDetails {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string version */ 1:
                    message.version = reader.string();
                    break;
                case /* string buildTime */ 2:
                    message.buildTime = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FirmwareDetails, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string version = 1; */
        if (message.version !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.version);
        /* string buildTime = 2; */
        if (message.buildTime !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.buildTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FirmwareDetails
 */
export const FirmwareDetails = new FirmwareDetails$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBoardDetailsResponse$Type extends MessageType<GetBoardDetailsResponse> {
    constructor() {
        super("GetBoardDetailsResponse", [
            { no: 1, name: "boardName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "firmwareDetails", kind: "message", T: () => FirmwareDetails }
        ]);
    }
    create(value?: PartialMessage<GetBoardDetailsResponse>): GetBoardDetailsResponse {
        const message = { boardName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetBoardDetailsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBoardDetailsResponse): GetBoardDetailsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string boardName */ 1:
                    message.boardName = reader.string();
                    break;
                case /* FirmwareDetails firmwareDetails */ 2:
                    message.firmwareDetails = FirmwareDetails.internalBinaryRead(reader, reader.uint32(), options, message.firmwareDetails);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBoardDetailsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string boardName = 1; */
        if (message.boardName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.boardName);
        /* FirmwareDetails firmwareDetails = 2; */
        if (message.firmwareDetails)
            FirmwareDetails.internalBinaryWrite(message.firmwareDetails, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetBoardDetailsResponse
 */
export const GetBoardDetailsResponse = new GetBoardDetailsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetBoardLightColorRequest$Type extends MessageType<SetBoardLightColorRequest> {
    constructor() {
        super("SetBoardLightColorRequest", [
            { no: 1, name: "red", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "green", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "blue", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SetBoardLightColorRequest>): SetBoardLightColorRequest {
        const message = { red: 0, green: 0, blue: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetBoardLightColorRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetBoardLightColorRequest): SetBoardLightColorRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 red */ 1:
                    message.red = reader.uint32();
                    break;
                case /* uint32 green */ 2:
                    message.green = reader.uint32();
                    break;
                case /* uint32 blue */ 3:
                    message.blue = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetBoardLightColorRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 red = 1; */
        if (message.red !== 0)
            writer.tag(1, WireType.Varint).uint32(message.red);
        /* uint32 green = 2; */
        if (message.green !== 0)
            writer.tag(2, WireType.Varint).uint32(message.green);
        /* uint32 blue = 3; */
        if (message.blue !== 0)
            writer.tag(3, WireType.Varint).uint32(message.blue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetBoardLightColorRequest
 */
export const SetBoardLightColorRequest = new SetBoardLightColorRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetBoardLightColorResponse$Type extends MessageType<SetBoardLightColorResponse> {
    constructor() {
        super("SetBoardLightColorResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SetBoardLightColorResponse>): SetBoardLightColorResponse {
        const message = { success: false, message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetBoardLightColorResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetBoardLightColorResponse): SetBoardLightColorResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetBoardLightColorResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetBoardLightColorResponse
 */
export const SetBoardLightColorResponse = new SetBoardLightColorResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InvalidCommandResponse$Type extends MessageType<InvalidCommandResponse> {
    constructor() {
        super("InvalidCommandResponse", [
            { no: 1, name: "unhandled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InvalidCommandResponse>): InvalidCommandResponse {
        const message = { unhandled: false, message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InvalidCommandResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InvalidCommandResponse): InvalidCommandResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool unhandled */ 1:
                    message.unhandled = reader.bool();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InvalidCommandResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool unhandled = 1; */
        if (message.unhandled !== false)
            writer.tag(1, WireType.Varint).bool(message.unhandled);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InvalidCommandResponse
 */
export const InvalidCommandResponse = new InvalidCommandResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MyAppCommand$Type extends MessageType<MyAppCommand> {
    constructor() {
        super("MyAppCommand", [
            { no: 1, name: "noArgCommand", kind: "enum", oneof: "command", T: () => ["NoArgCommands", NoArgCommands] },
            { no: 2, name: "helloQromaRequest", kind: "message", oneof: "command", T: () => HelloQromaRequest },
            { no: 3, name: "mathRequest", kind: "message", oneof: "command", T: () => MathRequest },
            { no: 4, name: "setUpdateConfiguration", kind: "message", oneof: "command", T: () => SetUpdateConfiguration },
            { no: 5, name: "setUpdateProgressIndicator", kind: "message", oneof: "command", T: () => SetUpdateProgressIndicator },
            { no: 6, name: "pingRequest", kind: "message", oneof: "command", T: () => PingRequest },
            { no: 7, name: "getBoardDetailsRequest", kind: "message", oneof: "command", T: () => GetBoardDetailsRequest },
            { no: 8, name: "setBoardLightColorRequest", kind: "message", oneof: "command", T: () => SetBoardLightColorRequest }
        ]);
    }
    create(value?: PartialMessage<MyAppCommand>): MyAppCommand {
        const message = { command: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MyAppCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MyAppCommand): MyAppCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* NoArgCommands noArgCommand */ 1:
                    message.command = {
                        oneofKind: "noArgCommand",
                        noArgCommand: reader.int32()
                    };
                    break;
                case /* HelloQromaRequest helloQromaRequest */ 2:
                    message.command = {
                        oneofKind: "helloQromaRequest",
                        helloQromaRequest: HelloQromaRequest.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).helloQromaRequest)
                    };
                    break;
                case /* MathRequest mathRequest */ 3:
                    message.command = {
                        oneofKind: "mathRequest",
                        mathRequest: MathRequest.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).mathRequest)
                    };
                    break;
                case /* SetUpdateConfiguration setUpdateConfiguration */ 4:
                    message.command = {
                        oneofKind: "setUpdateConfiguration",
                        setUpdateConfiguration: SetUpdateConfiguration.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).setUpdateConfiguration)
                    };
                    break;
                case /* SetUpdateProgressIndicator setUpdateProgressIndicator */ 5:
                    message.command = {
                        oneofKind: "setUpdateProgressIndicator",
                        setUpdateProgressIndicator: SetUpdateProgressIndicator.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).setUpdateProgressIndicator)
                    };
                    break;
                case /* PingRequest pingRequest */ 6:
                    message.command = {
                        oneofKind: "pingRequest",
                        pingRequest: PingRequest.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).pingRequest)
                    };
                    break;
                case /* GetBoardDetailsRequest getBoardDetailsRequest */ 7:
                    message.command = {
                        oneofKind: "getBoardDetailsRequest",
                        getBoardDetailsRequest: GetBoardDetailsRequest.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).getBoardDetailsRequest)
                    };
                    break;
                case /* SetBoardLightColorRequest setBoardLightColorRequest */ 8:
                    message.command = {
                        oneofKind: "setBoardLightColorRequest",
                        setBoardLightColorRequest: SetBoardLightColorRequest.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).setBoardLightColorRequest)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MyAppCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* NoArgCommands noArgCommand = 1; */
        if (message.command.oneofKind === "noArgCommand")
            writer.tag(1, WireType.Varint).int32(message.command.noArgCommand);
        /* HelloQromaRequest helloQromaRequest = 2; */
        if (message.command.oneofKind === "helloQromaRequest")
            HelloQromaRequest.internalBinaryWrite(message.command.helloQromaRequest, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* MathRequest mathRequest = 3; */
        if (message.command.oneofKind === "mathRequest")
            MathRequest.internalBinaryWrite(message.command.mathRequest, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* SetUpdateConfiguration setUpdateConfiguration = 4; */
        if (message.command.oneofKind === "setUpdateConfiguration")
            SetUpdateConfiguration.internalBinaryWrite(message.command.setUpdateConfiguration, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* SetUpdateProgressIndicator setUpdateProgressIndicator = 5; */
        if (message.command.oneofKind === "setUpdateProgressIndicator")
            SetUpdateProgressIndicator.internalBinaryWrite(message.command.setUpdateProgressIndicator, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* PingRequest pingRequest = 6; */
        if (message.command.oneofKind === "pingRequest")
            PingRequest.internalBinaryWrite(message.command.pingRequest, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* GetBoardDetailsRequest getBoardDetailsRequest = 7; */
        if (message.command.oneofKind === "getBoardDetailsRequest")
            GetBoardDetailsRequest.internalBinaryWrite(message.command.getBoardDetailsRequest, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* SetBoardLightColorRequest setBoardLightColorRequest = 8; */
        if (message.command.oneofKind === "setBoardLightColorRequest")
            SetBoardLightColorRequest.internalBinaryWrite(message.command.setBoardLightColorRequest, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MyAppCommand
 */
export const MyAppCommand = new MyAppCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MyAppResponse$Type extends MessageType<MyAppResponse> {
    constructor() {
        super("MyAppResponse", [
            { no: 1, name: "invalidCommandResponse", kind: "message", oneof: "response", T: () => InvalidCommandResponse },
            { no: 2, name: "helloQromaResponse", kind: "message", oneof: "response", T: () => HelloQromaResponse },
            { no: 3, name: "mathResponse", kind: "message", oneof: "response", T: () => MathResponse },
            { no: 4, name: "setUpdateConfigurationResponse", kind: "message", oneof: "response", T: () => SetUpdateConfigurationResponse },
            { no: 5, name: "setUpdateProgressIndicatorResponse", kind: "message", oneof: "response", T: () => SetUpdateProgressIndicatorResponse },
            { no: 6, name: "pingResponse", kind: "message", oneof: "response", T: () => PingResponse },
            { no: 7, name: "updateResponse", kind: "message", oneof: "response", T: () => UpdateResponse },
            { no: 8, name: "setBoardLightColorResponse", kind: "message", oneof: "response", T: () => SetBoardLightColorResponse },
            { no: 9, name: "getBoardDetailsResponse", kind: "message", oneof: "response", T: () => GetBoardDetailsResponse }
        ]);
    }
    create(value?: PartialMessage<MyAppResponse>): MyAppResponse {
        const message = { response: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MyAppResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MyAppResponse): MyAppResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* InvalidCommandResponse invalidCommandResponse */ 1:
                    message.response = {
                        oneofKind: "invalidCommandResponse",
                        invalidCommandResponse: InvalidCommandResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).invalidCommandResponse)
                    };
                    break;
                case /* HelloQromaResponse helloQromaResponse */ 2:
                    message.response = {
                        oneofKind: "helloQromaResponse",
                        helloQromaResponse: HelloQromaResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).helloQromaResponse)
                    };
                    break;
                case /* MathResponse mathResponse */ 3:
                    message.response = {
                        oneofKind: "mathResponse",
                        mathResponse: MathResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).mathResponse)
                    };
                    break;
                case /* SetUpdateConfigurationResponse setUpdateConfigurationResponse */ 4:
                    message.response = {
                        oneofKind: "setUpdateConfigurationResponse",
                        setUpdateConfigurationResponse: SetUpdateConfigurationResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).setUpdateConfigurationResponse)
                    };
                    break;
                case /* SetUpdateProgressIndicatorResponse setUpdateProgressIndicatorResponse */ 5:
                    message.response = {
                        oneofKind: "setUpdateProgressIndicatorResponse",
                        setUpdateProgressIndicatorResponse: SetUpdateProgressIndicatorResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).setUpdateProgressIndicatorResponse)
                    };
                    break;
                case /* PingResponse pingResponse */ 6:
                    message.response = {
                        oneofKind: "pingResponse",
                        pingResponse: PingResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).pingResponse)
                    };
                    break;
                case /* UpdateResponse updateResponse */ 7:
                    message.response = {
                        oneofKind: "updateResponse",
                        updateResponse: UpdateResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).updateResponse)
                    };
                    break;
                case /* SetBoardLightColorResponse setBoardLightColorResponse */ 8:
                    message.response = {
                        oneofKind: "setBoardLightColorResponse",
                        setBoardLightColorResponse: SetBoardLightColorResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).setBoardLightColorResponse)
                    };
                    break;
                case /* GetBoardDetailsResponse getBoardDetailsResponse */ 9:
                    message.response = {
                        oneofKind: "getBoardDetailsResponse",
                        getBoardDetailsResponse: GetBoardDetailsResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).getBoardDetailsResponse)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MyAppResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* InvalidCommandResponse invalidCommandResponse = 1; */
        if (message.response.oneofKind === "invalidCommandResponse")
            InvalidCommandResponse.internalBinaryWrite(message.response.invalidCommandResponse, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* HelloQromaResponse helloQromaResponse = 2; */
        if (message.response.oneofKind === "helloQromaResponse")
            HelloQromaResponse.internalBinaryWrite(message.response.helloQromaResponse, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* MathResponse mathResponse = 3; */
        if (message.response.oneofKind === "mathResponse")
            MathResponse.internalBinaryWrite(message.response.mathResponse, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* SetUpdateConfigurationResponse setUpdateConfigurationResponse = 4; */
        if (message.response.oneofKind === "setUpdateConfigurationResponse")
            SetUpdateConfigurationResponse.internalBinaryWrite(message.response.setUpdateConfigurationResponse, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* SetUpdateProgressIndicatorResponse setUpdateProgressIndicatorResponse = 5; */
        if (message.response.oneofKind === "setUpdateProgressIndicatorResponse")
            SetUpdateProgressIndicatorResponse.internalBinaryWrite(message.response.setUpdateProgressIndicatorResponse, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* PingResponse pingResponse = 6; */
        if (message.response.oneofKind === "pingResponse")
            PingResponse.internalBinaryWrite(message.response.pingResponse, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* UpdateResponse updateResponse = 7; */
        if (message.response.oneofKind === "updateResponse")
            UpdateResponse.internalBinaryWrite(message.response.updateResponse, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* SetBoardLightColorResponse setBoardLightColorResponse = 8; */
        if (message.response.oneofKind === "setBoardLightColorResponse")
            SetBoardLightColorResponse.internalBinaryWrite(message.response.setBoardLightColorResponse, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* GetBoardDetailsResponse getBoardDetailsResponse = 9; */
        if (message.response.oneofKind === "getBoardDetailsResponse")
            GetBoardDetailsResponse.internalBinaryWrite(message.response.getBoardDetailsResponse, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MyAppResponse
 */
export const MyAppResponse = new MyAppResponse$Type();
